// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: fast.proto

package fast;

public final class Fast {
  private Fast() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
  }

  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
    registerAllExtensions(
        (com.google.protobuf.ExtensionRegistryLite) registry);
  }
  public interface ElementOrBuilder extends
      // @@protoc_insertion_point(interface_extends:fast.Element)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>.fast.Element.Kind kind = 1;</code>
     */
    int getKindValue();
    /**
     * <code>.fast.Element.Kind kind = 1;</code>
     */
    fast.Fast.Element.Kind getKind();

    /**
     * <code>string text = 2;</code>
     */
    java.lang.String getText();
    /**
     * <code>string text = 2;</code>
     */
    com.google.protobuf.ByteString
        getTextBytes();

    /**
     * <code>string tail = 3;</code>
     */
    java.lang.String getTail();
    /**
     * <code>string tail = 3;</code>
     */
    com.google.protobuf.ByteString
        getTailBytes();

    /**
     * <code>repeated .fast.Element child = 4;</code>
     */
    java.util.List<fast.Fast.Element> 
        getChildList();
    /**
     * <code>repeated .fast.Element child = 4;</code>
     */
    fast.Fast.Element getChild(int index);
    /**
     * <code>repeated .fast.Element child = 4;</code>
     */
    int getChildCount();
    /**
     * <code>repeated .fast.Element child = 4;</code>
     */
    java.util.List<? extends fast.Fast.ElementOrBuilder> 
        getChildOrBuilderList();
    /**
     * <code>repeated .fast.Element child = 4;</code>
     */
    fast.Fast.ElementOrBuilder getChildOrBuilder(
        int index);

    /**
     * <code>.fast.Element.Unit unit = 5;</code>
     */
    fast.Fast.Element.Unit getUnit();
    /**
     * <code>.fast.Element.Unit unit = 5;</code>
     */
    fast.Fast.Element.UnitOrBuilder getUnitOrBuilder();

    /**
     * <code>.fast.Element.Literal literal = 6;</code>
     */
    fast.Fast.Element.Literal getLiteral();
    /**
     * <code>.fast.Element.Literal literal = 6;</code>
     */
    fast.Fast.Element.LiteralOrBuilder getLiteralOrBuilder();

    /**
     * <code>int32 line = 7;</code>
     */
    int getLine();

    /**
     * <code>int32 column = 8;</code>
     */
    int getColumn();

    public fast.Fast.Element.ExtraCase getExtraCase();
  }
  /**
   * Protobuf type {@code fast.Element}
   */
  public  static final class Element extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:fast.Element)
      ElementOrBuilder {
    // Use Element.newBuilder() to construct.
    private Element(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private Element() {
      kind_ = 0;
      text_ = "";
      tail_ = "";
      child_ = java.util.Collections.emptyList();
      line_ = 0;
      column_ = 0;
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return com.google.protobuf.UnknownFieldSet.getDefaultInstance();
    }
    private Element(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      int mutable_bitField0_ = 0;
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!input.skipField(tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              int rawValue = input.readEnum();

              kind_ = rawValue;
              break;
            }
            case 18: {
              java.lang.String s = input.readStringRequireUtf8();

              text_ = s;
              break;
            }
            case 26: {
              java.lang.String s = input.readStringRequireUtf8();

              tail_ = s;
              break;
            }
            case 34: {
              if (!((mutable_bitField0_ & 0x00000008) == 0x00000008)) {
                child_ = new java.util.ArrayList<fast.Fast.Element>();
                mutable_bitField0_ |= 0x00000008;
              }
              child_.add(
                  input.readMessage(fast.Fast.Element.parser(), extensionRegistry));
              break;
            }
            case 42: {
              fast.Fast.Element.Unit.Builder subBuilder = null;
              if (extraCase_ == 5) {
                subBuilder = ((fast.Fast.Element.Unit) extra_).toBuilder();
              }
              extra_ =
                  input.readMessage(fast.Fast.Element.Unit.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom((fast.Fast.Element.Unit) extra_);
                extra_ = subBuilder.buildPartial();
              }
              extraCase_ = 5;
              break;
            }
            case 50: {
              fast.Fast.Element.Literal.Builder subBuilder = null;
              if (extraCase_ == 6) {
                subBuilder = ((fast.Fast.Element.Literal) extra_).toBuilder();
              }
              extra_ =
                  input.readMessage(fast.Fast.Element.Literal.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom((fast.Fast.Element.Literal) extra_);
                extra_ = subBuilder.buildPartial();
              }
              extraCase_ = 6;
              break;
            }
            case 56: {

              line_ = input.readInt32();
              break;
            }
            case 64: {

              column_ = input.readInt32();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000008) == 0x00000008)) {
          child_ = java.util.Collections.unmodifiableList(child_);
        }
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return fast.Fast.internal_static_fast_Element_descriptor;
    }

    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return fast.Fast.internal_static_fast_Element_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              fast.Fast.Element.class, fast.Fast.Element.Builder.class);
    }

    /**
     * Protobuf enum {@code fast.Element.Kind}
     */
    public enum Kind
        implements com.google.protobuf.ProtocolMessageEnum {
      /**
       * <code>UNIT_KIND = 0;</code>
       */
      UNIT_KIND(0),
      /**
       * <code>DECL = 1;</code>
       */
      DECL(1),
      /**
       * <code>DECL_STMT = 2;</code>
       */
      DECL_STMT(2),
      /**
       * <code>INIT = 3;</code>
       */
      INIT(3),
      /**
       * <code>EXPR = 4;</code>
       */
      EXPR(4),
      /**
       * <code>EXPR_STMT = 5;</code>
       */
      EXPR_STMT(5),
      /**
       * <code>COMMENT = 6;</code>
       */
      COMMENT(6),
      /**
       * <code>CALL = 7;</code>
       */
      CALL(7),
      /**
       * <code>CONTROL = 8;</code>
       */
      CONTROL(8),
      /**
       * <code>INCR = 9;</code>
       */
      INCR(9),
      /**
       * <code>NONE = 10;</code>
       */
      NONE(10),
      /**
       * <code>VARIABLE = 11;</code>
       */
      VARIABLE(11),
      /**
       * <code>FUNCTION = 12;</code>
       */
      FUNCTION(12),
      /**
       * <code>FUNCTION_DECL = 13;</code>
       */
      FUNCTION_DECL(13),
      /**
       * <code>CONSTRUCTOR = 14;</code>
       */
      CONSTRUCTOR(14),
      /**
       * <code>CONSTRUCTOR_DECL = 15;</code>
       */
      CONSTRUCTOR_DECL(15),
      /**
       * <code>DESTRUCTOR = 16;</code>
       */
      DESTRUCTOR(16),
      /**
       * <code>DESTRUCTOR_DECL = 17;</code>
       */
      DESTRUCTOR_DECL(17),
      /**
       * <code>MACRO = 18;</code>
       */
      MACRO(18),
      /**
       * <code>SINGLE_MACRO = 19;</code>
       */
      SINGLE_MACRO(19),
      /**
       * <code>NULLOPERATOR = 20;</code>
       */
      NULLOPERATOR(20),
      /**
       * <code>ENUM_DEFN = 21;</code>
       */
      ENUM_DEFN(21),
      /**
       * <code>ENUM_DECL = 22;</code>
       */
      ENUM_DECL(22),
      /**
       * <code>GLOBAL_ATTRIBUTE = 23;</code>
       */
      GLOBAL_ATTRIBUTE(23),
      /**
       * <code>PROPERTY_ACCESSOR = 24;</code>
       */
      PROPERTY_ACCESSOR(24),
      /**
       * <code>PROPERTY_ACCESSOR_DECL = 25;</code>
       */
      PROPERTY_ACCESSOR_DECL(25),
      /**
       * <code>EXPRESSION = 26;</code>
       */
      EXPRESSION(26),
      /**
       * <code>CLASS_DEFN = 27;</code>
       */
      CLASS_DEFN(27),
      /**
       * <code>CLASS_DECL = 28;</code>
       */
      CLASS_DECL(28),
      /**
       * <code>UNION_DEFN = 29;</code>
       */
      UNION_DEFN(29),
      /**
       * <code>UNION_DECL = 30;</code>
       */
      UNION_DECL(30),
      /**
       * <code>STRUCT_DEFN = 31;</code>
       */
      STRUCT_DEFN(31),
      /**
       * <code>STRUCT_DECL = 32;</code>
       */
      STRUCT_DECL(32),
      /**
       * <code>INTERFACE_DEFN = 33;</code>
       */
      INTERFACE_DEFN(33),
      /**
       * <code>INTERFACE_DECL = 34;</code>
       */
      INTERFACE_DECL(34),
      /**
       * <code>ACCESS_REGION = 35;</code>
       */
      ACCESS_REGION(35),
      /**
       * <code>USING = 36;</code>
       */
      USING(36),
      /**
       * <code>OPERATOR_FUNCTION = 37;</code>
       */
      OPERATOR_FUNCTION(37),
      /**
       * <code>OPERATOR_FUNCTION_DECL = 38;</code>
       */
      OPERATOR_FUNCTION_DECL(38),
      /**
       * <code>EVENT = 39;</code>
       */
      EVENT(39),
      /**
       * <code>PROPERTY = 40;</code>
       */
      PROPERTY(40),
      /**
       * <code>ANNOTATION_DEFN = 41;</code>
       */
      ANNOTATION_DEFN(41),
      /**
       * <code>GLOBAL_TEMPLATE = 42;</code>
       */
      GLOBAL_TEMPLATE(42),
      /**
       * <pre>
       * entire source file
       * </pre>
       *
       * <code>UNIT = 43;</code>
       */
      UNIT(43),
      /**
       * <pre>
       * First token used for boundary
       * </pre>
       *
       * <code>TART_ELEMENT_TOKEN = 44;</code>
       */
      TART_ELEMENT_TOKEN(44),
      /**
       * <pre>
       * No output at all.  Only a placeholder
       * </pre>
       *
       * <code>NOP = 45;</code>
       */
      NOP(45),
      /**
       * <pre>
       * literal types
       * </pre>
       *
       * <code>STRING = 46;</code>
       */
      STRING(46),
      /**
       * <pre>
       * string or char marked by single quotes
       * </pre>
       *
       * <code>CHAR = 47;</code>
       */
      CHAR(47),
      /**
       * <pre>
       * literal number, constant
       * </pre>
       *
       * <code>LITERAL = 48;</code>
       */
      LITERAL(48),
      /**
       * <pre>
       * boolean literal, i.e., true, false
       * </pre>
       *
       * <code>BOOLEAN = 49;</code>
       */
      BOOLEAN(49),
      /**
       * <pre>
       * null types null, nullptr
       * </pre>
       *
       * <code>NULL = 50;</code>
       */
      NULL(50),
      /**
       * <pre>
       * complex numbers
       * </pre>
       *
       * <code>COMPLEX = 51;</code>
       */
      COMPLEX(51),
      /**
       * <pre>
       * operators
       * </pre>
       *
       * <code>OPERATOR = 52;</code>
       */
      OPERATOR(52),
      /**
       * <pre>
       * type modifiers
       * </pre>
       *
       * <code>MODIFIER = 53;</code>
       */
      MODIFIER(53),
      /**
       * <pre>
       * internal statement elements used in multiple statements
       * </pre>
       *
       * <code>NAME = 54;</code>
       */
      NAME(54),
      /**
       * <code>ONAME = 55;</code>
       */
      ONAME(55),
      /**
       * <code>CNAME = 56;</code>
       */
      CNAME(56),
      /**
       * <code>TYPE = 57;</code>
       */
      TYPE(57),
      /**
       * <code>TYPEPREV = 58;</code>
       */
      TYPEPREV(58),
      /**
       * <code>CONDITION = 59;</code>
       */
      CONDITION(59),
      /**
       * <code>BLOCK = 60;</code>
       */
      BLOCK(60),
      /**
       * <code>PSEUDO_BLOCK = 61;</code>
       */
      PSEUDO_BLOCK(61),
      /**
       * <code>INDEX = 62;</code>
       */
      INDEX(62),
      /**
       * <pre>
       * statements
       * </pre>
       *
       * <code>ENUM = 63;</code>
       */
      ENUM(63),
      /**
       * <code>ENUM_DECLARATION = 64;</code>
       */
      ENUM_DECLARATION(64),
      /**
       * <code>IF_STATEMENT = 65;</code>
       */
      IF_STATEMENT(65),
      /**
       * <code>TERNARY = 66;</code>
       */
      TERNARY(66),
      /**
       * <code>THEN = 67;</code>
       */
      THEN(67),
      /**
       * <code>ELSE = 68;</code>
       */
      ELSE(68),
      /**
       * <code>ELSEIF = 69;</code>
       */
      ELSEIF(69),
      /**
       * <code>WHILE_STATEMENT = 70;</code>
       */
      WHILE_STATEMENT(70),
      /**
       * <code>DO_STATEMENT = 71;</code>
       */
      DO_STATEMENT(71),
      /**
       * <code>FOR_STATEMENT = 72;</code>
       */
      FOR_STATEMENT(72),
      /**
       * <code>FOREACH_STATEMENT = 73;</code>
       */
      FOREACH_STATEMENT(73),
      /**
       * <code>FOR_CONTROL = 74;</code>
       */
      FOR_CONTROL(74),
      /**
       * <code>FOR_INITIALIZATION = 75;</code>
       */
      FOR_INITIALIZATION(75),
      /**
       * <code>FOR_CONDITION = 76;</code>
       */
      FOR_CONDITION(76),
      /**
       * <code>FOR_INCREMENT = 77;</code>
       */
      FOR_INCREMENT(77),
      /**
       * <code>FOR_LIKE_CONTROL = 78;</code>
       */
      FOR_LIKE_CONTROL(78),
      /**
       * <code>EXPRESSION_STATEMENT = 79;</code>
       */
      EXPRESSION_STATEMENT(79),
      /**
       * <pre>
       * EXPRESSION = 80;
       * </pre>
       *
       * <code>FUNCTION_CALL = 81;</code>
       */
      FUNCTION_CALL(81),
      /**
       * <code>DECLARATION_STATEMENT = 82;</code>
       */
      DECLARATION_STATEMENT(82),
      /**
       * <code>DECLARATION = 83;</code>
       */
      DECLARATION(83),
      /**
       * <code>DECLARATION_INITIALIZATION = 84;</code>
       */
      DECLARATION_INITIALIZATION(84),
      /**
       * <code>DECLARATION_RANGE = 85;</code>
       */
      DECLARATION_RANGE(85),
      /**
       * <code>RANGE = 86;</code>
       */
      RANGE(86),
      /**
       * <code>GOTO_STATEMENT = 87;</code>
       */
      GOTO_STATEMENT(87),
      /**
       * <code>CONTINUE_STATEMENT = 88;</code>
       */
      CONTINUE_STATEMENT(88),
      /**
       * <code>BREAK_STATEMENT = 89;</code>
       */
      BREAK_STATEMENT(89),
      /**
       * <code>LABEL_STATEMENT = 90;</code>
       */
      LABEL_STATEMENT(90),
      /**
       * <code>LABEL = 91;</code>
       */
      LABEL(91),
      /**
       * <code>SWITCH = 92;</code>
       */
      SWITCH(92),
      /**
       * <code>CASE = 93;</code>
       */
      CASE(93),
      /**
       * <code>DEFAULT = 94;</code>
       */
      DEFAULT(94),
      /**
       * <pre>
       * functions
       * </pre>
       *
       * <code>FUNCTION_DEFINITION = 95;</code>
       */
      FUNCTION_DEFINITION(95),
      /**
       * <code>FUNCTION_DECLARATION = 96;</code>
       */
      FUNCTION_DECLARATION(96),
      /**
       * <code>LAMBDA = 97;</code>
       */
      LAMBDA(97),
      /**
       * <code>FUNCTION_LAMBDA = 98;</code>
       */
      FUNCTION_LAMBDA(98),
      /**
       * <code>FUNCTION_SPECIFIER = 99;</code>
       */
      FUNCTION_SPECIFIER(99),
      /**
       * <code>RETURN_STATEMENT = 100;</code>
       */
      RETURN_STATEMENT(100),
      /**
       * <code>PARAMETER_LIST = 101;</code>
       */
      PARAMETER_LIST(101),
      /**
       * <code>PARAMETER = 102;</code>
       */
      PARAMETER(102),
      /**
       * <code>KRPARAMETER_LIST = 103;</code>
       */
      KRPARAMETER_LIST(103),
      /**
       * <code>KRPARAMETER = 104;</code>
       */
      KRPARAMETER(104),
      /**
       * <code>ARGUMENT_LIST = 105;</code>
       */
      ARGUMENT_LIST(105),
      /**
       * <code>ARGUMENT = 106;</code>
       */
      ARGUMENT(106),
      /**
       * <code>PSEUDO_PARAMETER_LIST = 107;</code>
       */
      PSEUDO_PARAMETER_LIST(107),
      /**
       * <code>INDEXER_PARAMETER_LIST = 108;</code>
       */
      INDEXER_PARAMETER_LIST(108),
      /**
       * <pre>
       * class, struct, union
       * </pre>
       *
       * <code>CLASS = 109;</code>
       */
      CLASS(109),
      /**
       * <code>CLASS_DECLARATION = 110;</code>
       */
      CLASS_DECLARATION(110),
      /**
       * <code>STRUCT = 111;</code>
       */
      STRUCT(111),
      /**
       * <code>STRUCT_DECLARATION = 112;</code>
       */
      STRUCT_DECLARATION(112),
      /**
       * <code>UNION = 113;</code>
       */
      UNION(113),
      /**
       * <code>UNION_DECLARATION = 114;</code>
       */
      UNION_DECLARATION(114),
      /**
       * <code>DERIVATION_LIST = 115;</code>
       */
      DERIVATION_LIST(115),
      /**
       * <code>PUBLIC_ACCESS = 116;</code>
       */
      PUBLIC_ACCESS(116),
      /**
       * <code>PUBLIC_ACCESS_DEFAULT = 117;</code>
       */
      PUBLIC_ACCESS_DEFAULT(117),
      /**
       * <code>PRIVATE_ACCESS = 118;</code>
       */
      PRIVATE_ACCESS(118),
      /**
       * <code>PRIVATE_ACCESS_DEFAULT = 119;</code>
       */
      PRIVATE_ACCESS_DEFAULT(119),
      /**
       * <code>PROTECTED_ACCESS = 120;</code>
       */
      PROTECTED_ACCESS(120),
      /**
       * <code>PROTECTED_ACCESS_DEFAULT = 121;</code>
       */
      PROTECTED_ACCESS_DEFAULT(121),
      /**
       * <code>MEMBER_INIT_LIST = 122;</code>
       */
      MEMBER_INIT_LIST(122),
      /**
       * <code>MEMBER_INITIALIZATION_LIST = 123;</code>
       */
      MEMBER_INITIALIZATION_LIST(123),
      /**
       * <code>MEMBER_INITIALIZATION = 124;</code>
       */
      MEMBER_INITIALIZATION(124),
      /**
       * <code>CONSTRUCTOR_DEFINITION = 125;</code>
       */
      CONSTRUCTOR_DEFINITION(125),
      /**
       * <code>CONSTRUCTOR_DECLARATION = 126;</code>
       */
      CONSTRUCTOR_DECLARATION(126),
      /**
       * <code>DESTRUCTOR_DEFINITION = 127;</code>
       */
      DESTRUCTOR_DEFINITION(127),
      /**
       * <code>DESTRUCTOR_DECLARATION = 128;</code>
       */
      DESTRUCTOR_DECLARATION(128),
      /**
       * <code>FRIEND = 129;</code>
       */
      FRIEND(129),
      /**
       * <code>CLASS_SPECIFIER = 130;</code>
       */
      CLASS_SPECIFIER(130),
      /**
       * <pre>
       * exception handling
       * </pre>
       *
       * <code>TRY_BLOCK = 131;</code>
       */
      TRY_BLOCK(131),
      /**
       * <code>CATCH_BLOCK = 132;</code>
       */
      CATCH_BLOCK(132),
      /**
       * <code>FINALLY_BLOCK = 133;</code>
       */
      FINALLY_BLOCK(133),
      /**
       * <code>THROW_STATEMENT = 134;</code>
       */
      THROW_STATEMENT(134),
      /**
       * <code>THROW_SPECIFIER = 135;</code>
       */
      THROW_SPECIFIER(135),
      /**
       * <code>THROW_SPECIFIER_JAVA = 136;</code>
       */
      THROW_SPECIFIER_JAVA(136),
      /**
       * <code>TEMPLATE = 137;</code>
       */
      TEMPLATE(137),
      /**
       * <code>GENERIC_ARGUMENT = 138;</code>
       */
      GENERIC_ARGUMENT(138),
      /**
       * <code>GENERIC_ARGUMENT_LIST = 139;</code>
       */
      GENERIC_ARGUMENT_LIST(139),
      /**
       * <code>TEMPLATE_PARAMETER = 140;</code>
       */
      TEMPLATE_PARAMETER(140),
      /**
       * <code>TEMPLATE_PARAMETER_LIST = 141;</code>
       */
      TEMPLATE_PARAMETER_LIST(141),
      /**
       * <code>GENERIC_PARAMETER = 142;</code>
       */
      GENERIC_PARAMETER(142),
      /**
       * <code>GENERIC_PARAMETER_LIST = 143;</code>
       */
      GENERIC_PARAMETER_LIST(143),
      /**
       * <pre>
       * C Family elements
       * </pre>
       *
       * <code>TYPEDEF = 144;</code>
       */
      TYPEDEF(144),
      /**
       * <code>ASM = 145;</code>
       */
      ASM(145),
      /**
       * <code>MACRO_CALL = 146;</code>
       */
      MACRO_CALL(146),
      /**
       * <code>SIZEOF_CALL = 147;</code>
       */
      SIZEOF_CALL(147),
      /**
       * <code>EXTERN = 148;</code>
       */
      EXTERN(148),
      /**
       * <code>NAMESPACE = 149;</code>
       */
      NAMESPACE(149),
      /**
       * <code>USING_DIRECTIVE = 150;</code>
       */
      USING_DIRECTIVE(150),
      /**
       * <code>DIRECTIVE = 151;</code>
       */
      DIRECTIVE(151),
      /**
       * <pre>
       * C
       * </pre>
       *
       * <code>ATOMIC = 152;</code>
       */
      ATOMIC(152),
      /**
       * <code>STATIC_ASSERT_STATEMENT = 153;</code>
       */
      STATIC_ASSERT_STATEMENT(153),
      /**
       * <code>GENERIC_SELECTION = 154;</code>
       */
      GENERIC_SELECTION(154),
      /**
       * <code>GENERIC_SELECTOR = 155;</code>
       */
      GENERIC_SELECTOR(155),
      /**
       * <code>GENERIC_ASSOCIATION_LIST = 156;</code>
       */
      GENERIC_ASSOCIATION_LIST(156),
      /**
       * <code>GENERIC_ASSOCIATION = 157;</code>
       */
      GENERIC_ASSOCIATION(157),
      /**
       * <pre>
       * C++
       * </pre>
       *
       * <code>ALIGNAS = 158;</code>
       */
      ALIGNAS(158),
      /**
       * <code>DECLTYPE = 159;</code>
       */
      DECLTYPE(159),
      /**
       * <code>CAPTURE = 160;</code>
       */
      CAPTURE(160),
      /**
       * <code>LAMBDA_CAPTURE = 161;</code>
       */
      LAMBDA_CAPTURE(161),
      /**
       * <code>NOEXCEPT = 162;</code>
       */
      NOEXCEPT(162),
      /**
       * <code>TYPENAME = 163;</code>
       */
      TYPENAME(163),
      /**
       * <code>ALIGNOF = 164;</code>
       */
      ALIGNOF(164),
      /**
       * <code>TYPEID = 165;</code>
       */
      TYPEID(165),
      /**
       * <code>SIZEOF_PACK = 166;</code>
       */
      SIZEOF_PACK(166),
      /**
       * <code>ENUM_CLASS = 167;</code>
       */
      ENUM_CLASS(167),
      /**
       * <code>ENUM_CLASS_DECLARATION = 168;</code>
       */
      ENUM_CLASS_DECLARATION(168),
      /**
       * <pre>
       * OPERATOR_FUNCTION = 169;
       * OPERATOR_FUNCTION_DECL = 170;
       * </pre>
       *
       * <code>REF_QUALIFIER = 171;</code>
       */
      REF_QUALIFIER(171),
      /**
       * <pre>
       * Qt
       * </pre>
       *
       * <code>SIGNAL_ACCESS = 172;</code>
       */
      SIGNAL_ACCESS(172),
      /**
       * <code>FOREVER_STATEMENT = 173;</code>
       */
      FOREVER_STATEMENT(173),
      /**
       * <code>EMIT_STATEMENT = 174;</code>
       */
      EMIT_STATEMENT(174),
      /**
       * <pre>
       * cpp directive internal elements
       * </pre>
       *
       * <code>CPP_DIRECTIVE = 175;</code>
       */
      CPP_DIRECTIVE(175),
      /**
       * <code>CPP_FILENAME = 176;</code>
       */
      CPP_FILENAME(176),
      /**
       * <code>FILE = 177;</code>
       */
      FILE(177),
      /**
       * <code>NUMBER = 178;</code>
       */
      NUMBER(178),
      /**
       * <code>CPP_NUMBER = 179;</code>
       */
      CPP_NUMBER(179),
      /**
       * <code>CPP_LITERAL = 180;</code>
       */
      CPP_LITERAL(180),
      /**
       * <code>CPP_MACRO_DEFN = 181;</code>
       */
      CPP_MACRO_DEFN(181),
      /**
       * <code>CPP_MACRO_VALUE = 182;</code>
       */
      CPP_MACRO_VALUE(182),
      /**
       * <pre>
       * cpp directives
       * </pre>
       *
       * <code>ERROR = 183;</code>
       */
      ERROR(183),
      /**
       * <code>CPP_ERROR = 184;</code>
       */
      CPP_ERROR(184),
      /**
       * <code>CPP_WARNING = 185;</code>
       */
      CPP_WARNING(185),
      /**
       * <code>CPP_PRAGMA = 186;</code>
       */
      CPP_PRAGMA(186),
      /**
       * <code>CPP_INCLUDE = 187;</code>
       */
      CPP_INCLUDE(187),
      /**
       * <code>CPP_DEFINE = 188;</code>
       */
      CPP_DEFINE(188),
      /**
       * <code>CPP_UNDEF = 189;</code>
       */
      CPP_UNDEF(189),
      /**
       * <code>CPP_LINE = 190;</code>
       */
      CPP_LINE(190),
      /**
       * <code>CPP_IF = 191;</code>
       */
      CPP_IF(191),
      /**
       * <code>CPP_IFDEF = 192;</code>
       */
      CPP_IFDEF(192),
      /**
       * <code>CPP_IFNDEF = 193;</code>
       */
      CPP_IFNDEF(193),
      /**
       * <code>CPP_THEN = 194;</code>
       */
      CPP_THEN(194),
      /**
       * <code>CPP_ELSE = 195;</code>
       */
      CPP_ELSE(195),
      /**
       * <code>CPP_ELIF = 196;</code>
       */
      CPP_ELIF(196),
      /**
       * <code>CPP_EMPTY = 197;</code>
       */
      CPP_EMPTY(197),
      /**
       * <pre>
       * C# cpp directives
       * </pre>
       *
       * <code>CPP_REGION = 198;</code>
       */
      CPP_REGION(198),
      /**
       * <code>CPP_ENDREGION = 199;</code>
       */
      CPP_ENDREGION(199),
      /**
       * <code>USING_STMT = 200;</code>
       */
      USING_STMT(200),
      /**
       * <code>ESCAPE = 201;</code>
       */
      ESCAPE(201),
      /**
       * <pre>
       * Objective-C cpp directives
       * </pre>
       *
       * <code>VALUE = 202;</code>
       */
      VALUE(202),
      /**
       * <code>CPP_IMPORT = 203;</code>
       */
      CPP_IMPORT(203),
      /**
       * <pre>
       * This HAS to mark the end of the CPP directives
       * </pre>
       *
       * <code>CPP_ENDIF = 204;</code>
       */
      CPP_ENDIF(204),
      /**
       * <pre>
       * Debug elements
       * </pre>
       *
       * <code>MARKER = 205;</code>
       */
      MARKER(205),
      /**
       * <code>ERROR_PARSE = 206;</code>
       */
      ERROR_PARSE(206),
      /**
       * <code>ERROR_MODE = 207;</code>
       */
      ERROR_MODE(207),
      /**
       * <pre>
       * Java elements
       * </pre>
       *
       * <code>IMPLEMENTS = 208;</code>
       */
      IMPLEMENTS(208),
      /**
       * <code>EXTENDS = 209;</code>
       */
      EXTENDS(209),
      /**
       * <code>IMPORT = 210;</code>
       */
      IMPORT(210),
      /**
       * <code>PACKAGE = 211;</code>
       */
      PACKAGE(211),
      /**
       * <code>ASSERT_STATEMENT = 212;</code>
       */
      ASSERT_STATEMENT(212),
      /**
       * <code>INTERFACE = 213;</code>
       */
      INTERFACE(213),
      /**
       * <code>INTERFACE_DECLARATION = 214;</code>
       */
      INTERFACE_DECLARATION(214),
      /**
       * <code>SYNCHRONIZED_STATEMENT = 215;</code>
       */
      SYNCHRONIZED_STATEMENT(215),
      /**
       * <code>ANNOTATION = 216;</code>
       */
      ANNOTATION(216),
      /**
       * <pre>
       * ANNOTATION_DEFN = 217;
       * </pre>
       *
       * <code>STATIC_BLOCK = 218;</code>
       */
      STATIC_BLOCK(218),
      /**
       * <pre>
       * C#
       * </pre>
       *
       * <code>CHECKED_STATEMENT = 219;</code>
       */
      CHECKED_STATEMENT(219),
      /**
       * <code>UNCHECKED_STATEMENT = 220;</code>
       */
      UNCHECKED_STATEMENT(220),
      /**
       * <code>ATTRIBUTE = 221;</code>
       */
      ATTRIBUTE(221),
      /**
       * <code>TARGET = 222;</code>
       */
      TARGET(222),
      /**
       * <code>UNSAFE_STATEMENT = 223;</code>
       */
      UNSAFE_STATEMENT(223),
      /**
       * <code>LOCK_STATEMENT = 224;</code>
       */
      LOCK_STATEMENT(224),
      /**
       * <code>FIXED_STATEMENT = 225;</code>
       */
      FIXED_STATEMENT(225),
      /**
       * <code>TYPEOF = 226;</code>
       */
      TYPEOF(226),
      /**
       * <code>USING_STATEMENT = 227;</code>
       */
      USING_STATEMENT(227),
      /**
       * <code>FUNCTION_DELEGATE = 228;</code>
       */
      FUNCTION_DELEGATE(228),
      /**
       * <pre>
       * EVENT = 229;
       * </pre>
       *
       * <code>CONSTRAINT = 230;</code>
       */
      CONSTRAINT(230),
      /**
       * <pre>
       * linq
       * </pre>
       *
       * <code>LINQ = 231;</code>
       */
      LINQ(231),
      /**
       * <code>FROM = 232;</code>
       */
      FROM(232),
      /**
       * <code>WHERE = 233;</code>
       */
      WHERE(233),
      /**
       * <code>SELECT = 234;</code>
       */
      SELECT(234),
      /**
       * <code>LET = 235;</code>
       */
      LET(235),
      /**
       * <code>ORDERBY = 236;</code>
       */
      ORDERBY(236),
      /**
       * <code>JOIN = 237;</code>
       */
      JOIN(237),
      /**
       * <code>GROUP = 238;</code>
       */
      GROUP(238),
      /**
       * <code>IN = 239;</code>
       */
      IN(239),
      /**
       * <code>ON = 240;</code>
       */
      ON(240),
      /**
       * <code>EQUALS = 241;</code>
       */
      EQUALS(241),
      /**
       * <code>BY = 242;</code>
       */
      BY(242),
      /**
       * <code>INTO = 243;</code>
       */
      INTO(243),
      /**
       * <pre>
       * misc
       * </pre>
       *
       * <code>EMPTY = 244;</code>
       */
      EMPTY(244),
      /**
       * <pre>
       * empty statement
       * </pre>
       *
       * <code>EMPTY_STMT = 245;</code>
       */
      EMPTY_STMT(245),
      /**
       * <pre>
       * Objective-C
       * </pre>
       *
       * <code>RECEIVER = 246;</code>
       */
      RECEIVER(246),
      /**
       * <code>MESSAGE = 247;</code>
       */
      MESSAGE(247),
      /**
       * <code>SELECTOR = 248;</code>
       */
      SELECTOR(248),
      /**
       * <code>PROTOCOL_LIST = 249;</code>
       */
      PROTOCOL_LIST(249),
      /**
       * <code>CATEGORY = 250;</code>
       */
      CATEGORY(250),
      /**
       * <code>PROTOCOL = 251;</code>
       */
      PROTOCOL(251),
      /**
       * <code>REQUIRED_DEFAULT = 252;</code>
       */
      REQUIRED_DEFAULT(252),
      /**
       * <code>REQUIRED = 253;</code>
       */
      REQUIRED(253),
      /**
       * <code>OPTIONAL = 254;</code>
       */
      OPTIONAL(254),
      /**
       * <pre>
       * PROPERTY = 255;
       * </pre>
       *
       * <code>ATTRIBUTE_LIST = 256;</code>
       */
      ATTRIBUTE_LIST(256),
      /**
       * <code>SYNTHESIZE = 257;</code>
       */
      SYNTHESIZE(257),
      /**
       * <code>DYNAMIC = 258;</code>
       */
      DYNAMIC(258),
      /**
       * <code>ENCODE = 259;</code>
       */
      ENCODE(259),
      /**
       * <code>AUTORELEASEPOOL = 260;</code>
       */
      AUTORELEASEPOOL(260),
      /**
       * <code>COMPATIBILITY_ALIAS = 261;</code>
       */
      COMPATIBILITY_ALIAS(261),
      /**
       * <code>NIL = 262;</code>
       */
      NIL(262),
      /**
       * <code>CLASS_INTERFACE = 263;</code>
       */
      CLASS_INTERFACE(263),
      /**
       * <code>CLASS_IMPLEMENTATION = 264;</code>
       */
      CLASS_IMPLEMENTATION(264),
      /**
       * <code>PROTOCOL_DECLARATION = 265;</code>
       */
      PROTOCOL_DECLARATION(265),
      /**
       * <pre>
       * casting
       * </pre>
       *
       * <code>CAST = 266;</code>
       */
      CAST(266),
      /**
       * <code>CONST_CAST = 267;</code>
       */
      CONST_CAST(267),
      /**
       * <code>DYNAMIC_CAST = 268;</code>
       */
      DYNAMIC_CAST(268),
      /**
       * <code>REINTERPRET_CAST = 269;</code>
       */
      REINTERPRET_CAST(269),
      /**
       * <code>STATIC_CAST = 270;</code>
       */
      STATIC_CAST(270),
      /**
       * <pre>
       * srcMLOutput used only
       * </pre>
       *
       * <code>POSITION = 271;</code>
       */
      POSITION(271),
      /**
       * <pre>
       * Other
       * </pre>
       *
       * <code>CUDA_ARGUMENT_LIST = 272;</code>
       */
      CUDA_ARGUMENT_LIST(272),
      /**
       * <pre>
       * OpenMP
       * </pre>
       *
       * <code>OMP_DIRECTIVE = 273;</code>
       */
      OMP_DIRECTIVE(273),
      /**
       * <code>OMP_NAME = 274;</code>
       */
      OMP_NAME(274),
      /**
       * <code>OMP_CLAUSE = 275;</code>
       */
      OMP_CLAUSE(275),
      /**
       * <code>OMP_ARGUMENT_LIST = 276;</code>
       */
      OMP_ARGUMENT_LIST(276),
      /**
       * <code>OMP_ARGUMENT = 277;</code>
       */
      OMP_ARGUMENT(277),
      /**
       * <code>OMP_EXPRESSION = 278;</code>
       */
      OMP_EXPRESSION(278),
      /**
       * <pre>
       * Last token used for boundary
       * </pre>
       *
       * <code>END_ELEMENT_TOKEN = 279;</code>
       */
      END_ELEMENT_TOKEN(279),
      /**
       * <pre>
       * special identifier
       * </pre>
       *
       * <code>MAIN = 280;</code>
       */
      MAIN(280),
      /**
       * <pre>
       * statements
       * </pre>
       *
       * <code>BREAK = 281;</code>
       */
      BREAK(281),
      /**
       * <code>CONTINUE = 282;</code>
       */
      CONTINUE(282),
      /**
       * <code>WHILE = 283;</code>
       */
      WHILE(283),
      /**
       * <code>DO = 284;</code>
       */
      DO(284),
      /**
       * <code>FOR = 285;</code>
       */
      FOR(285),
      /**
       * <code>IF = 286;</code>
       */
      IF(286),
      /**
       * <pre>
       * ELSE = 287;
       * SWITCH = 288;
       * CASE = 289;
       * DEFAULT = 290;
       * ENUM = 291;
       * C Family
       * TYPEDEF = 292;
       * </pre>
       *
       * <code>GOTO = 293;</code>
       */
      GOTO(293),
      /**
       * <pre>
       * ASM = 294;
       * </pre>
       *
       * <code>VISUAL_CXX_ASM = 295;</code>
       */
      VISUAL_CXX_ASM(295),
      /**
       * <code>SIZEOF = 296;</code>
       */
      SIZEOF(296),
      /**
       * <pre>
       * EXTERN = 297;
       * </pre>
       *
       * <code>AUTO = 298;</code>
       */
      AUTO(298),
      /**
       * <pre>
       * C
       * </pre>
       *
       * <code>REGISTER = 299;</code>
       */
      REGISTER(299),
      /**
       * <code>RESTRICT = 300;</code>
       */
      RESTRICT(300),
      /**
       * <pre>
       * ATOMIC = 301;
       * COMPLEX = 302;
       * GENERIC_SELECTION = 303;
       * </pre>
       *
       * <code>IMAGINARY = 304;</code>
       */
      IMAGINARY(304),
      /**
       * <code>NORETURN = 305;</code>
       */
      NORETURN(305),
      /**
       * <code>STATIC_ASSERT = 306;</code>
       */
      STATIC_ASSERT(306),
      /**
       * <pre>
       * Combined C/C++
       * </pre>
       *
       * <code>CRESTRICT = 307;</code>
       */
      CRESTRICT(307),
      /**
       * <code>CXX_TRY = 308;</code>
       */
      CXX_TRY(308),
      /**
       * <code>CXX_CATCH = 309;</code>
       */
      CXX_CATCH(309),
      /**
       * <code>CXX_CLASS = 310;</code>
       */
      CXX_CLASS(310),
      /**
       * <pre>
       * C++
       * </pre>
       *
       * <code>CONSTEXPR = 311;</code>
       */
      CONSTEXPR(311),
      /**
       * <pre>
       * NOEXCEPT = 312;
       * </pre>
       *
       * <code>THREAD_LOCAL = 313;</code>
       */
      THREAD_LOCAL(313),
      /**
       * <code>NULLPTR = 314;</code>
       */
      NULLPTR(314),
      /**
       * <pre>
       * DECLTYPE = 315;
       * ALIGNAS = 316;
       * TYPENAME = 317;
       * ALIGNOF = 318;
       * TYPEID = 319;
       * CONST_CAST = 320;
       * DYNAMIC_CAST = 321;
       * REINTERPRET_CAST = 322;
       * STATIC_CAST = 323;
       * aggregate types
       * UNION = 324;
       * STRUCT = 325;
       * types
       * </pre>
       *
       * <code>VOID = 326;</code>
       */
      VOID(326),
      /**
       * <pre>
       * functions
       * </pre>
       *
       * <code>RETURN = 327;</code>
       */
      RETURN(327),
      /**
       * <pre>
       * cpp
       * </pre>
       *
       * <code>INCLUDE = 328;</code>
       */
      INCLUDE(328),
      /**
       * <code>DEFINE = 329;</code>
       */
      DEFINE(329),
      /**
       * <code>ELIF = 330;</code>
       */
      ELIF(330),
      /**
       * <code>ENDIF = 331;</code>
       */
      ENDIF(331),
      /**
       * <code>ERRORPREC = 332;</code>
       */
      ERRORPREC(332),
      /**
       * <code>WARNING = 333;</code>
       */
      WARNING(333),
      /**
       * <code>IFDEF = 334;</code>
       */
      IFDEF(334),
      /**
       * <code>IFNDEF = 335;</code>
       */
      IFNDEF(335),
      /**
       * <code>LINE = 336;</code>
       */
      LINE(336),
      /**
       * <code>PRAGMA = 337;</code>
       */
      PRAGMA(337),
      /**
       * <code>UNDEF = 338;</code>
       */
      UNDEF(338),
      /**
       * <code>INLINE = 339;</code>
       */
      INLINE(339),
      /**
       * <pre>
       * macro
       * </pre>
       *
       * <code>MACRO_TYPE_NAME = 340;</code>
       */
      MACRO_TYPE_NAME(340),
      /**
       * <code>MACRO_CASE = 341;</code>
       */
      MACRO_CASE(341),
      /**
       * <code>MACRO_LABEL = 342;</code>
       */
      MACRO_LABEL(342),
      /**
       * <pre>
       * MACRO_SPECIFIER = 343;
       * </pre>
       *
       * <code>SPECIFIER = 344;</code>
       */
      SPECIFIER(344),
      /**
       * <pre>
       * specifiers that are not needed for parsing
       * exception handling
       * </pre>
       *
       * <code>TRY = 345;</code>
       */
      TRY(345),
      /**
       * <code>CATCH = 346;</code>
       */
      CATCH(346),
      /**
       * <code>THROW = 347;</code>
       */
      THROW(347),
      /**
       * <code>THROWS = 348;</code>
       */
      THROWS(348),
      /**
       * <pre>
       * class
       * CLASS = 349;
       * </pre>
       *
       * <code>PUBLIC = 350;</code>
       */
      PUBLIC(350),
      /**
       * <code>PRIVATE = 351;</code>
       */
      PRIVATE(351),
      /**
       * <code>PROTECTED = 352;</code>
       */
      PROTECTED(352),
      /**
       * <code>VIRTUAL = 353;</code>
       */
      VIRTUAL(353),
      /**
       * <pre>
       * FRIEND = 354;
       * OPERATOR = 355;
       * </pre>
       *
       * <code>EXPLICIT = 356;</code>
       */
      EXPLICIT(356),
      /**
       * <pre>
       * Qt
       * </pre>
       *
       * <code>FOREVER = 357;</code>
       */
      FOREVER(357),
      /**
       * <code>SIGNAL = 358;</code>
       */
      SIGNAL(358),
      /**
       * <code>EMIT = 359;</code>
       */
      EMIT(359),
      /**
       * <pre>
       * namespaces
       * NAMESPACE = 360;
       * USING = 361;
       * templates
       * TEMPLATE = 362;
       * </pre>
       *
       * <code>NEW = 363;</code>
       */
      NEW(363),
      /**
       * <code>DELETE = 364;</code>
       */
      DELETE(364),
      /**
       * <pre>
       * specifiers
       * </pre>
       *
       * <code>STATIC = 365;</code>
       */
      STATIC(365),
      /**
       * <code>CONST = 366;</code>
       */
      CONST(366),
      /**
       * <code>MUTABLE = 367;</code>
       */
      MUTABLE(367),
      /**
       * <code>VOLATILE = 368;</code>
       */
      VOLATILE(368),
      /**
       * <code>TRANSIENT = 369;</code>
       */
      TRANSIENT(369),
      /**
       * <pre>
       * Java tokens
       * IMPORT = 370;
       * PACKAGE = 371;
       * </pre>
       *
       * <code>FINALLY = 372;</code>
       */
      FINALLY(372),
      /**
       * <pre>
       * EXTENDS = 373;
       * IMPLEMENTS = 374;
       * INTERFACE = 375;
       * </pre>
       *
       * <code>FINAL = 376;</code>
       */
      FINAL(376),
      /**
       * <code>ABSTRACT = 377;</code>
       */
      ABSTRACT(377),
      /**
       * <code>SUPER = 378;</code>
       */
      SUPER(378),
      /**
       * <code>SYNCHRONIZED = 379;</code>
       */
      SYNCHRONIZED(379),
      /**
       * <code>NATIVE = 380;</code>
       */
      NATIVE(380),
      /**
       * <code>STRICTFP = 381;</code>
       */
      STRICTFP(381),
      /**
       * <code>NULLLITERAL = 382;</code>
       */
      NULLLITERAL(382),
      /**
       * <code>ASSERT = 383;</code>
       */
      ASSERT(383),
      /**
       * <pre>
       * C# tokens
       * </pre>
       *
       * <code>FOREACH = 384;</code>
       */
      FOREACH(384),
      /**
       * <code>REF = 385;</code>
       */
      REF(385),
      /**
       * <code>OUT = 386;</code>
       */
      OUT(386),
      /**
       * <pre>
       * IN = 387;
       * </pre>
       *
       * <code>LOCK = 388;</code>
       */
      LOCK(388),
      /**
       * <code>IS = 389;</code>
       */
      IS(389),
      /**
       * <code>INTERNAL = 390;</code>
       */
      INTERNAL(390),
      /**
       * <code>SEALED = 391;</code>
       */
      SEALED(391),
      /**
       * <code>OVERRIDE = 392;</code>
       */
      OVERRIDE(392),
      /**
       * <code>IMPLICIT = 393;</code>
       */
      IMPLICIT(393),
      /**
       * <code>STACKALLOC = 394;</code>
       */
      STACKALLOC(394),
      /**
       * <code>AS = 395;</code>
       */
      AS(395),
      /**
       * <code>DELEGATE = 396;</code>
       */
      DELEGATE(396),
      /**
       * <code>FIXED = 397;</code>
       */
      FIXED(397),
      /**
       * <code>CHECKED = 398;</code>
       */
      CHECKED(398),
      /**
       * <code>UNCHECKED = 399;</code>
       */
      UNCHECKED(399),
      /**
       * <code>REGION = 400;</code>
       */
      REGION(400),
      /**
       * <code>ENDREGION = 401;</code>
       */
      ENDREGION(401),
      /**
       * <code>UNSAFE = 402;</code>
       */
      UNSAFE(402),
      /**
       * <code>READONLY = 403;</code>
       */
      READONLY(403),
      /**
       * <code>GET = 404;</code>
       */
      GET(404),
      /**
       * <code>SET = 405;</code>
       */
      SET(405),
      /**
       * <code>ADD = 406;</code>
       */
      ADD(406),
      /**
       * <code>REMOVE = 407;</code>
       */
      REMOVE(407),
      /**
       * <code>YIELD = 408;</code>
       */
      YIELD(408),
      /**
       * <code>PARTIAL = 409;</code>
       */
      PARTIAL(409),
      /**
       * <code>AWAIT = 410;</code>
       */
      AWAIT(410),
      /**
       * <pre>
       * EVENT = 411;
       * </pre>
       *
       * <code>ASYNC = 412;</code>
       */
      ASYNC(412),
      /**
       * <code>THIS = 413;</code>
       */
      THIS(413),
      /**
       * <code>PARAMS = 414;</code>
       */
      PARAMS(414),
      /**
       * <pre>
       * TYPEOF = 415;
       * </pre>
       *
       * <code>ALIAS = 416;</code>
       */
      ALIAS(416),
      /**
       * <pre>
       * linq
       * FROM = 417;
       * WHERE = 418;
       * SELECT = 419;
       * LET = 420;
       * ORDERBY = 421;
       * </pre>
       *
       * <code>ASCENDING = 422;</code>
       */
      ASCENDING(422),
      /**
       * <code>DESCENDING = 423;</code>
       */
      DESCENDING(423),
      /**
       * <pre>
       * GROUP = 424;
       * BY = 425;
       * JOIN = 426;
       * ON = 427;
       * EQUALS = 428;
       * INTO = 429;
       * Objective-C
       * </pre>
       *
       * <code>ATINTERFACE = 430;</code>
       */
      ATINTERFACE(430),
      /**
       * <code>ATIMPLEMENTATION = 431;</code>
       */
      ATIMPLEMENTATION(431),
      /**
       * <code>ATEND = 432;</code>
       */
      ATEND(432),
      /**
       * <code>ATPROTOCOL = 433;</code>
       */
      ATPROTOCOL(433),
      /**
       * <code>ATREQUIRED = 434;</code>
       */
      ATREQUIRED(434),
      /**
       * <code>ATOPTIONAL = 435;</code>
       */
      ATOPTIONAL(435),
      /**
       * <pre>
       * PROPERTY = 436;
       * SYNTHESIZE = 437;
       * DYNAMIC = 438;
       * ENCODE = 439;
       * SELECTOR = 440;
       * </pre>
       *
       * <code>ATCLASS = 441;</code>
       */
      ATCLASS(441),
      /**
       * <pre>
       * Apple
       * BLOCK = 442;
       * </pre>
       *
       * <code>WEAK = 443;</code>
       */
      WEAK(443),
      /**
       * <code>STRONG = 444;</code>
       */
      STRONG(444),
      /**
       * <pre>
       * AUTORELEASEPOOL = 445;
       * COMPATIBILITY_ALIAS = 446;
       * NIL = 447;
       * OpenMp
       * </pre>
       *
       * <code>OMP_OMP = 448;</code>
       */
      OMP_OMP(448),
      /**
       * <code>SPECIAL_CHARS = 449;</code>
       */
      SPECIAL_CHARS(449),
      UNRECOGNIZED(-1),
      ;

      /**
       * <code>UNIT_KIND = 0;</code>
       */
      public static final int UNIT_KIND_VALUE = 0;
      /**
       * <code>DECL = 1;</code>
       */
      public static final int DECL_VALUE = 1;
      /**
       * <code>DECL_STMT = 2;</code>
       */
      public static final int DECL_STMT_VALUE = 2;
      /**
       * <code>INIT = 3;</code>
       */
      public static final int INIT_VALUE = 3;
      /**
       * <code>EXPR = 4;</code>
       */
      public static final int EXPR_VALUE = 4;
      /**
       * <code>EXPR_STMT = 5;</code>
       */
      public static final int EXPR_STMT_VALUE = 5;
      /**
       * <code>COMMENT = 6;</code>
       */
      public static final int COMMENT_VALUE = 6;
      /**
       * <code>CALL = 7;</code>
       */
      public static final int CALL_VALUE = 7;
      /**
       * <code>CONTROL = 8;</code>
       */
      public static final int CONTROL_VALUE = 8;
      /**
       * <code>INCR = 9;</code>
       */
      public static final int INCR_VALUE = 9;
      /**
       * <code>NONE = 10;</code>
       */
      public static final int NONE_VALUE = 10;
      /**
       * <code>VARIABLE = 11;</code>
       */
      public static final int VARIABLE_VALUE = 11;
      /**
       * <code>FUNCTION = 12;</code>
       */
      public static final int FUNCTION_VALUE = 12;
      /**
       * <code>FUNCTION_DECL = 13;</code>
       */
      public static final int FUNCTION_DECL_VALUE = 13;
      /**
       * <code>CONSTRUCTOR = 14;</code>
       */
      public static final int CONSTRUCTOR_VALUE = 14;
      /**
       * <code>CONSTRUCTOR_DECL = 15;</code>
       */
      public static final int CONSTRUCTOR_DECL_VALUE = 15;
      /**
       * <code>DESTRUCTOR = 16;</code>
       */
      public static final int DESTRUCTOR_VALUE = 16;
      /**
       * <code>DESTRUCTOR_DECL = 17;</code>
       */
      public static final int DESTRUCTOR_DECL_VALUE = 17;
      /**
       * <code>MACRO = 18;</code>
       */
      public static final int MACRO_VALUE = 18;
      /**
       * <code>SINGLE_MACRO = 19;</code>
       */
      public static final int SINGLE_MACRO_VALUE = 19;
      /**
       * <code>NULLOPERATOR = 20;</code>
       */
      public static final int NULLOPERATOR_VALUE = 20;
      /**
       * <code>ENUM_DEFN = 21;</code>
       */
      public static final int ENUM_DEFN_VALUE = 21;
      /**
       * <code>ENUM_DECL = 22;</code>
       */
      public static final int ENUM_DECL_VALUE = 22;
      /**
       * <code>GLOBAL_ATTRIBUTE = 23;</code>
       */
      public static final int GLOBAL_ATTRIBUTE_VALUE = 23;
      /**
       * <code>PROPERTY_ACCESSOR = 24;</code>
       */
      public static final int PROPERTY_ACCESSOR_VALUE = 24;
      /**
       * <code>PROPERTY_ACCESSOR_DECL = 25;</code>
       */
      public static final int PROPERTY_ACCESSOR_DECL_VALUE = 25;
      /**
       * <code>EXPRESSION = 26;</code>
       */
      public static final int EXPRESSION_VALUE = 26;
      /**
       * <code>CLASS_DEFN = 27;</code>
       */
      public static final int CLASS_DEFN_VALUE = 27;
      /**
       * <code>CLASS_DECL = 28;</code>
       */
      public static final int CLASS_DECL_VALUE = 28;
      /**
       * <code>UNION_DEFN = 29;</code>
       */
      public static final int UNION_DEFN_VALUE = 29;
      /**
       * <code>UNION_DECL = 30;</code>
       */
      public static final int UNION_DECL_VALUE = 30;
      /**
       * <code>STRUCT_DEFN = 31;</code>
       */
      public static final int STRUCT_DEFN_VALUE = 31;
      /**
       * <code>STRUCT_DECL = 32;</code>
       */
      public static final int STRUCT_DECL_VALUE = 32;
      /**
       * <code>INTERFACE_DEFN = 33;</code>
       */
      public static final int INTERFACE_DEFN_VALUE = 33;
      /**
       * <code>INTERFACE_DECL = 34;</code>
       */
      public static final int INTERFACE_DECL_VALUE = 34;
      /**
       * <code>ACCESS_REGION = 35;</code>
       */
      public static final int ACCESS_REGION_VALUE = 35;
      /**
       * <code>USING = 36;</code>
       */
      public static final int USING_VALUE = 36;
      /**
       * <code>OPERATOR_FUNCTION = 37;</code>
       */
      public static final int OPERATOR_FUNCTION_VALUE = 37;
      /**
       * <code>OPERATOR_FUNCTION_DECL = 38;</code>
       */
      public static final int OPERATOR_FUNCTION_DECL_VALUE = 38;
      /**
       * <code>EVENT = 39;</code>
       */
      public static final int EVENT_VALUE = 39;
      /**
       * <code>PROPERTY = 40;</code>
       */
      public static final int PROPERTY_VALUE = 40;
      /**
       * <code>ANNOTATION_DEFN = 41;</code>
       */
      public static final int ANNOTATION_DEFN_VALUE = 41;
      /**
       * <code>GLOBAL_TEMPLATE = 42;</code>
       */
      public static final int GLOBAL_TEMPLATE_VALUE = 42;
      /**
       * <pre>
       * entire source file
       * </pre>
       *
       * <code>UNIT = 43;</code>
       */
      public static final int UNIT_VALUE = 43;
      /**
       * <pre>
       * First token used for boundary
       * </pre>
       *
       * <code>TART_ELEMENT_TOKEN = 44;</code>
       */
      public static final int TART_ELEMENT_TOKEN_VALUE = 44;
      /**
       * <pre>
       * No output at all.  Only a placeholder
       * </pre>
       *
       * <code>NOP = 45;</code>
       */
      public static final int NOP_VALUE = 45;
      /**
       * <pre>
       * literal types
       * </pre>
       *
       * <code>STRING = 46;</code>
       */
      public static final int STRING_VALUE = 46;
      /**
       * <pre>
       * string or char marked by single quotes
       * </pre>
       *
       * <code>CHAR = 47;</code>
       */
      public static final int CHAR_VALUE = 47;
      /**
       * <pre>
       * literal number, constant
       * </pre>
       *
       * <code>LITERAL = 48;</code>
       */
      public static final int LITERAL_VALUE = 48;
      /**
       * <pre>
       * boolean literal, i.e., true, false
       * </pre>
       *
       * <code>BOOLEAN = 49;</code>
       */
      public static final int BOOLEAN_VALUE = 49;
      /**
       * <pre>
       * null types null, nullptr
       * </pre>
       *
       * <code>NULL = 50;</code>
       */
      public static final int NULL_VALUE = 50;
      /**
       * <pre>
       * complex numbers
       * </pre>
       *
       * <code>COMPLEX = 51;</code>
       */
      public static final int COMPLEX_VALUE = 51;
      /**
       * <pre>
       * operators
       * </pre>
       *
       * <code>OPERATOR = 52;</code>
       */
      public static final int OPERATOR_VALUE = 52;
      /**
       * <pre>
       * type modifiers
       * </pre>
       *
       * <code>MODIFIER = 53;</code>
       */
      public static final int MODIFIER_VALUE = 53;
      /**
       * <pre>
       * internal statement elements used in multiple statements
       * </pre>
       *
       * <code>NAME = 54;</code>
       */
      public static final int NAME_VALUE = 54;
      /**
       * <code>ONAME = 55;</code>
       */
      public static final int ONAME_VALUE = 55;
      /**
       * <code>CNAME = 56;</code>
       */
      public static final int CNAME_VALUE = 56;
      /**
       * <code>TYPE = 57;</code>
       */
      public static final int TYPE_VALUE = 57;
      /**
       * <code>TYPEPREV = 58;</code>
       */
      public static final int TYPEPREV_VALUE = 58;
      /**
       * <code>CONDITION = 59;</code>
       */
      public static final int CONDITION_VALUE = 59;
      /**
       * <code>BLOCK = 60;</code>
       */
      public static final int BLOCK_VALUE = 60;
      /**
       * <code>PSEUDO_BLOCK = 61;</code>
       */
      public static final int PSEUDO_BLOCK_VALUE = 61;
      /**
       * <code>INDEX = 62;</code>
       */
      public static final int INDEX_VALUE = 62;
      /**
       * <pre>
       * statements
       * </pre>
       *
       * <code>ENUM = 63;</code>
       */
      public static final int ENUM_VALUE = 63;
      /**
       * <code>ENUM_DECLARATION = 64;</code>
       */
      public static final int ENUM_DECLARATION_VALUE = 64;
      /**
       * <code>IF_STATEMENT = 65;</code>
       */
      public static final int IF_STATEMENT_VALUE = 65;
      /**
       * <code>TERNARY = 66;</code>
       */
      public static final int TERNARY_VALUE = 66;
      /**
       * <code>THEN = 67;</code>
       */
      public static final int THEN_VALUE = 67;
      /**
       * <code>ELSE = 68;</code>
       */
      public static final int ELSE_VALUE = 68;
      /**
       * <code>ELSEIF = 69;</code>
       */
      public static final int ELSEIF_VALUE = 69;
      /**
       * <code>WHILE_STATEMENT = 70;</code>
       */
      public static final int WHILE_STATEMENT_VALUE = 70;
      /**
       * <code>DO_STATEMENT = 71;</code>
       */
      public static final int DO_STATEMENT_VALUE = 71;
      /**
       * <code>FOR_STATEMENT = 72;</code>
       */
      public static final int FOR_STATEMENT_VALUE = 72;
      /**
       * <code>FOREACH_STATEMENT = 73;</code>
       */
      public static final int FOREACH_STATEMENT_VALUE = 73;
      /**
       * <code>FOR_CONTROL = 74;</code>
       */
      public static final int FOR_CONTROL_VALUE = 74;
      /**
       * <code>FOR_INITIALIZATION = 75;</code>
       */
      public static final int FOR_INITIALIZATION_VALUE = 75;
      /**
       * <code>FOR_CONDITION = 76;</code>
       */
      public static final int FOR_CONDITION_VALUE = 76;
      /**
       * <code>FOR_INCREMENT = 77;</code>
       */
      public static final int FOR_INCREMENT_VALUE = 77;
      /**
       * <code>FOR_LIKE_CONTROL = 78;</code>
       */
      public static final int FOR_LIKE_CONTROL_VALUE = 78;
      /**
       * <code>EXPRESSION_STATEMENT = 79;</code>
       */
      public static final int EXPRESSION_STATEMENT_VALUE = 79;
      /**
       * <pre>
       * EXPRESSION = 80;
       * </pre>
       *
       * <code>FUNCTION_CALL = 81;</code>
       */
      public static final int FUNCTION_CALL_VALUE = 81;
      /**
       * <code>DECLARATION_STATEMENT = 82;</code>
       */
      public static final int DECLARATION_STATEMENT_VALUE = 82;
      /**
       * <code>DECLARATION = 83;</code>
       */
      public static final int DECLARATION_VALUE = 83;
      /**
       * <code>DECLARATION_INITIALIZATION = 84;</code>
       */
      public static final int DECLARATION_INITIALIZATION_VALUE = 84;
      /**
       * <code>DECLARATION_RANGE = 85;</code>
       */
      public static final int DECLARATION_RANGE_VALUE = 85;
      /**
       * <code>RANGE = 86;</code>
       */
      public static final int RANGE_VALUE = 86;
      /**
       * <code>GOTO_STATEMENT = 87;</code>
       */
      public static final int GOTO_STATEMENT_VALUE = 87;
      /**
       * <code>CONTINUE_STATEMENT = 88;</code>
       */
      public static final int CONTINUE_STATEMENT_VALUE = 88;
      /**
       * <code>BREAK_STATEMENT = 89;</code>
       */
      public static final int BREAK_STATEMENT_VALUE = 89;
      /**
       * <code>LABEL_STATEMENT = 90;</code>
       */
      public static final int LABEL_STATEMENT_VALUE = 90;
      /**
       * <code>LABEL = 91;</code>
       */
      public static final int LABEL_VALUE = 91;
      /**
       * <code>SWITCH = 92;</code>
       */
      public static final int SWITCH_VALUE = 92;
      /**
       * <code>CASE = 93;</code>
       */
      public static final int CASE_VALUE = 93;
      /**
       * <code>DEFAULT = 94;</code>
       */
      public static final int DEFAULT_VALUE = 94;
      /**
       * <pre>
       * functions
       * </pre>
       *
       * <code>FUNCTION_DEFINITION = 95;</code>
       */
      public static final int FUNCTION_DEFINITION_VALUE = 95;
      /**
       * <code>FUNCTION_DECLARATION = 96;</code>
       */
      public static final int FUNCTION_DECLARATION_VALUE = 96;
      /**
       * <code>LAMBDA = 97;</code>
       */
      public static final int LAMBDA_VALUE = 97;
      /**
       * <code>FUNCTION_LAMBDA = 98;</code>
       */
      public static final int FUNCTION_LAMBDA_VALUE = 98;
      /**
       * <code>FUNCTION_SPECIFIER = 99;</code>
       */
      public static final int FUNCTION_SPECIFIER_VALUE = 99;
      /**
       * <code>RETURN_STATEMENT = 100;</code>
       */
      public static final int RETURN_STATEMENT_VALUE = 100;
      /**
       * <code>PARAMETER_LIST = 101;</code>
       */
      public static final int PARAMETER_LIST_VALUE = 101;
      /**
       * <code>PARAMETER = 102;</code>
       */
      public static final int PARAMETER_VALUE = 102;
      /**
       * <code>KRPARAMETER_LIST = 103;</code>
       */
      public static final int KRPARAMETER_LIST_VALUE = 103;
      /**
       * <code>KRPARAMETER = 104;</code>
       */
      public static final int KRPARAMETER_VALUE = 104;
      /**
       * <code>ARGUMENT_LIST = 105;</code>
       */
      public static final int ARGUMENT_LIST_VALUE = 105;
      /**
       * <code>ARGUMENT = 106;</code>
       */
      public static final int ARGUMENT_VALUE = 106;
      /**
       * <code>PSEUDO_PARAMETER_LIST = 107;</code>
       */
      public static final int PSEUDO_PARAMETER_LIST_VALUE = 107;
      /**
       * <code>INDEXER_PARAMETER_LIST = 108;</code>
       */
      public static final int INDEXER_PARAMETER_LIST_VALUE = 108;
      /**
       * <pre>
       * class, struct, union
       * </pre>
       *
       * <code>CLASS = 109;</code>
       */
      public static final int CLASS_VALUE = 109;
      /**
       * <code>CLASS_DECLARATION = 110;</code>
       */
      public static final int CLASS_DECLARATION_VALUE = 110;
      /**
       * <code>STRUCT = 111;</code>
       */
      public static final int STRUCT_VALUE = 111;
      /**
       * <code>STRUCT_DECLARATION = 112;</code>
       */
      public static final int STRUCT_DECLARATION_VALUE = 112;
      /**
       * <code>UNION = 113;</code>
       */
      public static final int UNION_VALUE = 113;
      /**
       * <code>UNION_DECLARATION = 114;</code>
       */
      public static final int UNION_DECLARATION_VALUE = 114;
      /**
       * <code>DERIVATION_LIST = 115;</code>
       */
      public static final int DERIVATION_LIST_VALUE = 115;
      /**
       * <code>PUBLIC_ACCESS = 116;</code>
       */
      public static final int PUBLIC_ACCESS_VALUE = 116;
      /**
       * <code>PUBLIC_ACCESS_DEFAULT = 117;</code>
       */
      public static final int PUBLIC_ACCESS_DEFAULT_VALUE = 117;
      /**
       * <code>PRIVATE_ACCESS = 118;</code>
       */
      public static final int PRIVATE_ACCESS_VALUE = 118;
      /**
       * <code>PRIVATE_ACCESS_DEFAULT = 119;</code>
       */
      public static final int PRIVATE_ACCESS_DEFAULT_VALUE = 119;
      /**
       * <code>PROTECTED_ACCESS = 120;</code>
       */
      public static final int PROTECTED_ACCESS_VALUE = 120;
      /**
       * <code>PROTECTED_ACCESS_DEFAULT = 121;</code>
       */
      public static final int PROTECTED_ACCESS_DEFAULT_VALUE = 121;
      /**
       * <code>MEMBER_INIT_LIST = 122;</code>
       */
      public static final int MEMBER_INIT_LIST_VALUE = 122;
      /**
       * <code>MEMBER_INITIALIZATION_LIST = 123;</code>
       */
      public static final int MEMBER_INITIALIZATION_LIST_VALUE = 123;
      /**
       * <code>MEMBER_INITIALIZATION = 124;</code>
       */
      public static final int MEMBER_INITIALIZATION_VALUE = 124;
      /**
       * <code>CONSTRUCTOR_DEFINITION = 125;</code>
       */
      public static final int CONSTRUCTOR_DEFINITION_VALUE = 125;
      /**
       * <code>CONSTRUCTOR_DECLARATION = 126;</code>
       */
      public static final int CONSTRUCTOR_DECLARATION_VALUE = 126;
      /**
       * <code>DESTRUCTOR_DEFINITION = 127;</code>
       */
      public static final int DESTRUCTOR_DEFINITION_VALUE = 127;
      /**
       * <code>DESTRUCTOR_DECLARATION = 128;</code>
       */
      public static final int DESTRUCTOR_DECLARATION_VALUE = 128;
      /**
       * <code>FRIEND = 129;</code>
       */
      public static final int FRIEND_VALUE = 129;
      /**
       * <code>CLASS_SPECIFIER = 130;</code>
       */
      public static final int CLASS_SPECIFIER_VALUE = 130;
      /**
       * <pre>
       * exception handling
       * </pre>
       *
       * <code>TRY_BLOCK = 131;</code>
       */
      public static final int TRY_BLOCK_VALUE = 131;
      /**
       * <code>CATCH_BLOCK = 132;</code>
       */
      public static final int CATCH_BLOCK_VALUE = 132;
      /**
       * <code>FINALLY_BLOCK = 133;</code>
       */
      public static final int FINALLY_BLOCK_VALUE = 133;
      /**
       * <code>THROW_STATEMENT = 134;</code>
       */
      public static final int THROW_STATEMENT_VALUE = 134;
      /**
       * <code>THROW_SPECIFIER = 135;</code>
       */
      public static final int THROW_SPECIFIER_VALUE = 135;
      /**
       * <code>THROW_SPECIFIER_JAVA = 136;</code>
       */
      public static final int THROW_SPECIFIER_JAVA_VALUE = 136;
      /**
       * <code>TEMPLATE = 137;</code>
       */
      public static final int TEMPLATE_VALUE = 137;
      /**
       * <code>GENERIC_ARGUMENT = 138;</code>
       */
      public static final int GENERIC_ARGUMENT_VALUE = 138;
      /**
       * <code>GENERIC_ARGUMENT_LIST = 139;</code>
       */
      public static final int GENERIC_ARGUMENT_LIST_VALUE = 139;
      /**
       * <code>TEMPLATE_PARAMETER = 140;</code>
       */
      public static final int TEMPLATE_PARAMETER_VALUE = 140;
      /**
       * <code>TEMPLATE_PARAMETER_LIST = 141;</code>
       */
      public static final int TEMPLATE_PARAMETER_LIST_VALUE = 141;
      /**
       * <code>GENERIC_PARAMETER = 142;</code>
       */
      public static final int GENERIC_PARAMETER_VALUE = 142;
      /**
       * <code>GENERIC_PARAMETER_LIST = 143;</code>
       */
      public static final int GENERIC_PARAMETER_LIST_VALUE = 143;
      /**
       * <pre>
       * C Family elements
       * </pre>
       *
       * <code>TYPEDEF = 144;</code>
       */
      public static final int TYPEDEF_VALUE = 144;
      /**
       * <code>ASM = 145;</code>
       */
      public static final int ASM_VALUE = 145;
      /**
       * <code>MACRO_CALL = 146;</code>
       */
      public static final int MACRO_CALL_VALUE = 146;
      /**
       * <code>SIZEOF_CALL = 147;</code>
       */
      public static final int SIZEOF_CALL_VALUE = 147;
      /**
       * <code>EXTERN = 148;</code>
       */
      public static final int EXTERN_VALUE = 148;
      /**
       * <code>NAMESPACE = 149;</code>
       */
      public static final int NAMESPACE_VALUE = 149;
      /**
       * <code>USING_DIRECTIVE = 150;</code>
       */
      public static final int USING_DIRECTIVE_VALUE = 150;
      /**
       * <code>DIRECTIVE = 151;</code>
       */
      public static final int DIRECTIVE_VALUE = 151;
      /**
       * <pre>
       * C
       * </pre>
       *
       * <code>ATOMIC = 152;</code>
       */
      public static final int ATOMIC_VALUE = 152;
      /**
       * <code>STATIC_ASSERT_STATEMENT = 153;</code>
       */
      public static final int STATIC_ASSERT_STATEMENT_VALUE = 153;
      /**
       * <code>GENERIC_SELECTION = 154;</code>
       */
      public static final int GENERIC_SELECTION_VALUE = 154;
      /**
       * <code>GENERIC_SELECTOR = 155;</code>
       */
      public static final int GENERIC_SELECTOR_VALUE = 155;
      /**
       * <code>GENERIC_ASSOCIATION_LIST = 156;</code>
       */
      public static final int GENERIC_ASSOCIATION_LIST_VALUE = 156;
      /**
       * <code>GENERIC_ASSOCIATION = 157;</code>
       */
      public static final int GENERIC_ASSOCIATION_VALUE = 157;
      /**
       * <pre>
       * C++
       * </pre>
       *
       * <code>ALIGNAS = 158;</code>
       */
      public static final int ALIGNAS_VALUE = 158;
      /**
       * <code>DECLTYPE = 159;</code>
       */
      public static final int DECLTYPE_VALUE = 159;
      /**
       * <code>CAPTURE = 160;</code>
       */
      public static final int CAPTURE_VALUE = 160;
      /**
       * <code>LAMBDA_CAPTURE = 161;</code>
       */
      public static final int LAMBDA_CAPTURE_VALUE = 161;
      /**
       * <code>NOEXCEPT = 162;</code>
       */
      public static final int NOEXCEPT_VALUE = 162;
      /**
       * <code>TYPENAME = 163;</code>
       */
      public static final int TYPENAME_VALUE = 163;
      /**
       * <code>ALIGNOF = 164;</code>
       */
      public static final int ALIGNOF_VALUE = 164;
      /**
       * <code>TYPEID = 165;</code>
       */
      public static final int TYPEID_VALUE = 165;
      /**
       * <code>SIZEOF_PACK = 166;</code>
       */
      public static final int SIZEOF_PACK_VALUE = 166;
      /**
       * <code>ENUM_CLASS = 167;</code>
       */
      public static final int ENUM_CLASS_VALUE = 167;
      /**
       * <code>ENUM_CLASS_DECLARATION = 168;</code>
       */
      public static final int ENUM_CLASS_DECLARATION_VALUE = 168;
      /**
       * <pre>
       * OPERATOR_FUNCTION = 169;
       * OPERATOR_FUNCTION_DECL = 170;
       * </pre>
       *
       * <code>REF_QUALIFIER = 171;</code>
       */
      public static final int REF_QUALIFIER_VALUE = 171;
      /**
       * <pre>
       * Qt
       * </pre>
       *
       * <code>SIGNAL_ACCESS = 172;</code>
       */
      public static final int SIGNAL_ACCESS_VALUE = 172;
      /**
       * <code>FOREVER_STATEMENT = 173;</code>
       */
      public static final int FOREVER_STATEMENT_VALUE = 173;
      /**
       * <code>EMIT_STATEMENT = 174;</code>
       */
      public static final int EMIT_STATEMENT_VALUE = 174;
      /**
       * <pre>
       * cpp directive internal elements
       * </pre>
       *
       * <code>CPP_DIRECTIVE = 175;</code>
       */
      public static final int CPP_DIRECTIVE_VALUE = 175;
      /**
       * <code>CPP_FILENAME = 176;</code>
       */
      public static final int CPP_FILENAME_VALUE = 176;
      /**
       * <code>FILE = 177;</code>
       */
      public static final int FILE_VALUE = 177;
      /**
       * <code>NUMBER = 178;</code>
       */
      public static final int NUMBER_VALUE = 178;
      /**
       * <code>CPP_NUMBER = 179;</code>
       */
      public static final int CPP_NUMBER_VALUE = 179;
      /**
       * <code>CPP_LITERAL = 180;</code>
       */
      public static final int CPP_LITERAL_VALUE = 180;
      /**
       * <code>CPP_MACRO_DEFN = 181;</code>
       */
      public static final int CPP_MACRO_DEFN_VALUE = 181;
      /**
       * <code>CPP_MACRO_VALUE = 182;</code>
       */
      public static final int CPP_MACRO_VALUE_VALUE = 182;
      /**
       * <pre>
       * cpp directives
       * </pre>
       *
       * <code>ERROR = 183;</code>
       */
      public static final int ERROR_VALUE = 183;
      /**
       * <code>CPP_ERROR = 184;</code>
       */
      public static final int CPP_ERROR_VALUE = 184;
      /**
       * <code>CPP_WARNING = 185;</code>
       */
      public static final int CPP_WARNING_VALUE = 185;
      /**
       * <code>CPP_PRAGMA = 186;</code>
       */
      public static final int CPP_PRAGMA_VALUE = 186;
      /**
       * <code>CPP_INCLUDE = 187;</code>
       */
      public static final int CPP_INCLUDE_VALUE = 187;
      /**
       * <code>CPP_DEFINE = 188;</code>
       */
      public static final int CPP_DEFINE_VALUE = 188;
      /**
       * <code>CPP_UNDEF = 189;</code>
       */
      public static final int CPP_UNDEF_VALUE = 189;
      /**
       * <code>CPP_LINE = 190;</code>
       */
      public static final int CPP_LINE_VALUE = 190;
      /**
       * <code>CPP_IF = 191;</code>
       */
      public static final int CPP_IF_VALUE = 191;
      /**
       * <code>CPP_IFDEF = 192;</code>
       */
      public static final int CPP_IFDEF_VALUE = 192;
      /**
       * <code>CPP_IFNDEF = 193;</code>
       */
      public static final int CPP_IFNDEF_VALUE = 193;
      /**
       * <code>CPP_THEN = 194;</code>
       */
      public static final int CPP_THEN_VALUE = 194;
      /**
       * <code>CPP_ELSE = 195;</code>
       */
      public static final int CPP_ELSE_VALUE = 195;
      /**
       * <code>CPP_ELIF = 196;</code>
       */
      public static final int CPP_ELIF_VALUE = 196;
      /**
       * <code>CPP_EMPTY = 197;</code>
       */
      public static final int CPP_EMPTY_VALUE = 197;
      /**
       * <pre>
       * C# cpp directives
       * </pre>
       *
       * <code>CPP_REGION = 198;</code>
       */
      public static final int CPP_REGION_VALUE = 198;
      /**
       * <code>CPP_ENDREGION = 199;</code>
       */
      public static final int CPP_ENDREGION_VALUE = 199;
      /**
       * <code>USING_STMT = 200;</code>
       */
      public static final int USING_STMT_VALUE = 200;
      /**
       * <code>ESCAPE = 201;</code>
       */
      public static final int ESCAPE_VALUE = 201;
      /**
       * <pre>
       * Objective-C cpp directives
       * </pre>
       *
       * <code>VALUE = 202;</code>
       */
      public static final int VALUE_VALUE = 202;
      /**
       * <code>CPP_IMPORT = 203;</code>
       */
      public static final int CPP_IMPORT_VALUE = 203;
      /**
       * <pre>
       * This HAS to mark the end of the CPP directives
       * </pre>
       *
       * <code>CPP_ENDIF = 204;</code>
       */
      public static final int CPP_ENDIF_VALUE = 204;
      /**
       * <pre>
       * Debug elements
       * </pre>
       *
       * <code>MARKER = 205;</code>
       */
      public static final int MARKER_VALUE = 205;
      /**
       * <code>ERROR_PARSE = 206;</code>
       */
      public static final int ERROR_PARSE_VALUE = 206;
      /**
       * <code>ERROR_MODE = 207;</code>
       */
      public static final int ERROR_MODE_VALUE = 207;
      /**
       * <pre>
       * Java elements
       * </pre>
       *
       * <code>IMPLEMENTS = 208;</code>
       */
      public static final int IMPLEMENTS_VALUE = 208;
      /**
       * <code>EXTENDS = 209;</code>
       */
      public static final int EXTENDS_VALUE = 209;
      /**
       * <code>IMPORT = 210;</code>
       */
      public static final int IMPORT_VALUE = 210;
      /**
       * <code>PACKAGE = 211;</code>
       */
      public static final int PACKAGE_VALUE = 211;
      /**
       * <code>ASSERT_STATEMENT = 212;</code>
       */
      public static final int ASSERT_STATEMENT_VALUE = 212;
      /**
       * <code>INTERFACE = 213;</code>
       */
      public static final int INTERFACE_VALUE = 213;
      /**
       * <code>INTERFACE_DECLARATION = 214;</code>
       */
      public static final int INTERFACE_DECLARATION_VALUE = 214;
      /**
       * <code>SYNCHRONIZED_STATEMENT = 215;</code>
       */
      public static final int SYNCHRONIZED_STATEMENT_VALUE = 215;
      /**
       * <code>ANNOTATION = 216;</code>
       */
      public static final int ANNOTATION_VALUE = 216;
      /**
       * <pre>
       * ANNOTATION_DEFN = 217;
       * </pre>
       *
       * <code>STATIC_BLOCK = 218;</code>
       */
      public static final int STATIC_BLOCK_VALUE = 218;
      /**
       * <pre>
       * C#
       * </pre>
       *
       * <code>CHECKED_STATEMENT = 219;</code>
       */
      public static final int CHECKED_STATEMENT_VALUE = 219;
      /**
       * <code>UNCHECKED_STATEMENT = 220;</code>
       */
      public static final int UNCHECKED_STATEMENT_VALUE = 220;
      /**
       * <code>ATTRIBUTE = 221;</code>
       */
      public static final int ATTRIBUTE_VALUE = 221;
      /**
       * <code>TARGET = 222;</code>
       */
      public static final int TARGET_VALUE = 222;
      /**
       * <code>UNSAFE_STATEMENT = 223;</code>
       */
      public static final int UNSAFE_STATEMENT_VALUE = 223;
      /**
       * <code>LOCK_STATEMENT = 224;</code>
       */
      public static final int LOCK_STATEMENT_VALUE = 224;
      /**
       * <code>FIXED_STATEMENT = 225;</code>
       */
      public static final int FIXED_STATEMENT_VALUE = 225;
      /**
       * <code>TYPEOF = 226;</code>
       */
      public static final int TYPEOF_VALUE = 226;
      /**
       * <code>USING_STATEMENT = 227;</code>
       */
      public static final int USING_STATEMENT_VALUE = 227;
      /**
       * <code>FUNCTION_DELEGATE = 228;</code>
       */
      public static final int FUNCTION_DELEGATE_VALUE = 228;
      /**
       * <pre>
       * EVENT = 229;
       * </pre>
       *
       * <code>CONSTRAINT = 230;</code>
       */
      public static final int CONSTRAINT_VALUE = 230;
      /**
       * <pre>
       * linq
       * </pre>
       *
       * <code>LINQ = 231;</code>
       */
      public static final int LINQ_VALUE = 231;
      /**
       * <code>FROM = 232;</code>
       */
      public static final int FROM_VALUE = 232;
      /**
       * <code>WHERE = 233;</code>
       */
      public static final int WHERE_VALUE = 233;
      /**
       * <code>SELECT = 234;</code>
       */
      public static final int SELECT_VALUE = 234;
      /**
       * <code>LET = 235;</code>
       */
      public static final int LET_VALUE = 235;
      /**
       * <code>ORDERBY = 236;</code>
       */
      public static final int ORDERBY_VALUE = 236;
      /**
       * <code>JOIN = 237;</code>
       */
      public static final int JOIN_VALUE = 237;
      /**
       * <code>GROUP = 238;</code>
       */
      public static final int GROUP_VALUE = 238;
      /**
       * <code>IN = 239;</code>
       */
      public static final int IN_VALUE = 239;
      /**
       * <code>ON = 240;</code>
       */
      public static final int ON_VALUE = 240;
      /**
       * <code>EQUALS = 241;</code>
       */
      public static final int EQUALS_VALUE = 241;
      /**
       * <code>BY = 242;</code>
       */
      public static final int BY_VALUE = 242;
      /**
       * <code>INTO = 243;</code>
       */
      public static final int INTO_VALUE = 243;
      /**
       * <pre>
       * misc
       * </pre>
       *
       * <code>EMPTY = 244;</code>
       */
      public static final int EMPTY_VALUE = 244;
      /**
       * <pre>
       * empty statement
       * </pre>
       *
       * <code>EMPTY_STMT = 245;</code>
       */
      public static final int EMPTY_STMT_VALUE = 245;
      /**
       * <pre>
       * Objective-C
       * </pre>
       *
       * <code>RECEIVER = 246;</code>
       */
      public static final int RECEIVER_VALUE = 246;
      /**
       * <code>MESSAGE = 247;</code>
       */
      public static final int MESSAGE_VALUE = 247;
      /**
       * <code>SELECTOR = 248;</code>
       */
      public static final int SELECTOR_VALUE = 248;
      /**
       * <code>PROTOCOL_LIST = 249;</code>
       */
      public static final int PROTOCOL_LIST_VALUE = 249;
      /**
       * <code>CATEGORY = 250;</code>
       */
      public static final int CATEGORY_VALUE = 250;
      /**
       * <code>PROTOCOL = 251;</code>
       */
      public static final int PROTOCOL_VALUE = 251;
      /**
       * <code>REQUIRED_DEFAULT = 252;</code>
       */
      public static final int REQUIRED_DEFAULT_VALUE = 252;
      /**
       * <code>REQUIRED = 253;</code>
       */
      public static final int REQUIRED_VALUE = 253;
      /**
       * <code>OPTIONAL = 254;</code>
       */
      public static final int OPTIONAL_VALUE = 254;
      /**
       * <pre>
       * PROPERTY = 255;
       * </pre>
       *
       * <code>ATTRIBUTE_LIST = 256;</code>
       */
      public static final int ATTRIBUTE_LIST_VALUE = 256;
      /**
       * <code>SYNTHESIZE = 257;</code>
       */
      public static final int SYNTHESIZE_VALUE = 257;
      /**
       * <code>DYNAMIC = 258;</code>
       */
      public static final int DYNAMIC_VALUE = 258;
      /**
       * <code>ENCODE = 259;</code>
       */
      public static final int ENCODE_VALUE = 259;
      /**
       * <code>AUTORELEASEPOOL = 260;</code>
       */
      public static final int AUTORELEASEPOOL_VALUE = 260;
      /**
       * <code>COMPATIBILITY_ALIAS = 261;</code>
       */
      public static final int COMPATIBILITY_ALIAS_VALUE = 261;
      /**
       * <code>NIL = 262;</code>
       */
      public static final int NIL_VALUE = 262;
      /**
       * <code>CLASS_INTERFACE = 263;</code>
       */
      public static final int CLASS_INTERFACE_VALUE = 263;
      /**
       * <code>CLASS_IMPLEMENTATION = 264;</code>
       */
      public static final int CLASS_IMPLEMENTATION_VALUE = 264;
      /**
       * <code>PROTOCOL_DECLARATION = 265;</code>
       */
      public static final int PROTOCOL_DECLARATION_VALUE = 265;
      /**
       * <pre>
       * casting
       * </pre>
       *
       * <code>CAST = 266;</code>
       */
      public static final int CAST_VALUE = 266;
      /**
       * <code>CONST_CAST = 267;</code>
       */
      public static final int CONST_CAST_VALUE = 267;
      /**
       * <code>DYNAMIC_CAST = 268;</code>
       */
      public static final int DYNAMIC_CAST_VALUE = 268;
      /**
       * <code>REINTERPRET_CAST = 269;</code>
       */
      public static final int REINTERPRET_CAST_VALUE = 269;
      /**
       * <code>STATIC_CAST = 270;</code>
       */
      public static final int STATIC_CAST_VALUE = 270;
      /**
       * <pre>
       * srcMLOutput used only
       * </pre>
       *
       * <code>POSITION = 271;</code>
       */
      public static final int POSITION_VALUE = 271;
      /**
       * <pre>
       * Other
       * </pre>
       *
       * <code>CUDA_ARGUMENT_LIST = 272;</code>
       */
      public static final int CUDA_ARGUMENT_LIST_VALUE = 272;
      /**
       * <pre>
       * OpenMP
       * </pre>
       *
       * <code>OMP_DIRECTIVE = 273;</code>
       */
      public static final int OMP_DIRECTIVE_VALUE = 273;
      /**
       * <code>OMP_NAME = 274;</code>
       */
      public static final int OMP_NAME_VALUE = 274;
      /**
       * <code>OMP_CLAUSE = 275;</code>
       */
      public static final int OMP_CLAUSE_VALUE = 275;
      /**
       * <code>OMP_ARGUMENT_LIST = 276;</code>
       */
      public static final int OMP_ARGUMENT_LIST_VALUE = 276;
      /**
       * <code>OMP_ARGUMENT = 277;</code>
       */
      public static final int OMP_ARGUMENT_VALUE = 277;
      /**
       * <code>OMP_EXPRESSION = 278;</code>
       */
      public static final int OMP_EXPRESSION_VALUE = 278;
      /**
       * <pre>
       * Last token used for boundary
       * </pre>
       *
       * <code>END_ELEMENT_TOKEN = 279;</code>
       */
      public static final int END_ELEMENT_TOKEN_VALUE = 279;
      /**
       * <pre>
       * special identifier
       * </pre>
       *
       * <code>MAIN = 280;</code>
       */
      public static final int MAIN_VALUE = 280;
      /**
       * <pre>
       * statements
       * </pre>
       *
       * <code>BREAK = 281;</code>
       */
      public static final int BREAK_VALUE = 281;
      /**
       * <code>CONTINUE = 282;</code>
       */
      public static final int CONTINUE_VALUE = 282;
      /**
       * <code>WHILE = 283;</code>
       */
      public static final int WHILE_VALUE = 283;
      /**
       * <code>DO = 284;</code>
       */
      public static final int DO_VALUE = 284;
      /**
       * <code>FOR = 285;</code>
       */
      public static final int FOR_VALUE = 285;
      /**
       * <code>IF = 286;</code>
       */
      public static final int IF_VALUE = 286;
      /**
       * <pre>
       * ELSE = 287;
       * SWITCH = 288;
       * CASE = 289;
       * DEFAULT = 290;
       * ENUM = 291;
       * C Family
       * TYPEDEF = 292;
       * </pre>
       *
       * <code>GOTO = 293;</code>
       */
      public static final int GOTO_VALUE = 293;
      /**
       * <pre>
       * ASM = 294;
       * </pre>
       *
       * <code>VISUAL_CXX_ASM = 295;</code>
       */
      public static final int VISUAL_CXX_ASM_VALUE = 295;
      /**
       * <code>SIZEOF = 296;</code>
       */
      public static final int SIZEOF_VALUE = 296;
      /**
       * <pre>
       * EXTERN = 297;
       * </pre>
       *
       * <code>AUTO = 298;</code>
       */
      public static final int AUTO_VALUE = 298;
      /**
       * <pre>
       * C
       * </pre>
       *
       * <code>REGISTER = 299;</code>
       */
      public static final int REGISTER_VALUE = 299;
      /**
       * <code>RESTRICT = 300;</code>
       */
      public static final int RESTRICT_VALUE = 300;
      /**
       * <pre>
       * ATOMIC = 301;
       * COMPLEX = 302;
       * GENERIC_SELECTION = 303;
       * </pre>
       *
       * <code>IMAGINARY = 304;</code>
       */
      public static final int IMAGINARY_VALUE = 304;
      /**
       * <code>NORETURN = 305;</code>
       */
      public static final int NORETURN_VALUE = 305;
      /**
       * <code>STATIC_ASSERT = 306;</code>
       */
      public static final int STATIC_ASSERT_VALUE = 306;
      /**
       * <pre>
       * Combined C/C++
       * </pre>
       *
       * <code>CRESTRICT = 307;</code>
       */
      public static final int CRESTRICT_VALUE = 307;
      /**
       * <code>CXX_TRY = 308;</code>
       */
      public static final int CXX_TRY_VALUE = 308;
      /**
       * <code>CXX_CATCH = 309;</code>
       */
      public static final int CXX_CATCH_VALUE = 309;
      /**
       * <code>CXX_CLASS = 310;</code>
       */
      public static final int CXX_CLASS_VALUE = 310;
      /**
       * <pre>
       * C++
       * </pre>
       *
       * <code>CONSTEXPR = 311;</code>
       */
      public static final int CONSTEXPR_VALUE = 311;
      /**
       * <pre>
       * NOEXCEPT = 312;
       * </pre>
       *
       * <code>THREAD_LOCAL = 313;</code>
       */
      public static final int THREAD_LOCAL_VALUE = 313;
      /**
       * <code>NULLPTR = 314;</code>
       */
      public static final int NULLPTR_VALUE = 314;
      /**
       * <pre>
       * DECLTYPE = 315;
       * ALIGNAS = 316;
       * TYPENAME = 317;
       * ALIGNOF = 318;
       * TYPEID = 319;
       * CONST_CAST = 320;
       * DYNAMIC_CAST = 321;
       * REINTERPRET_CAST = 322;
       * STATIC_CAST = 323;
       * aggregate types
       * UNION = 324;
       * STRUCT = 325;
       * types
       * </pre>
       *
       * <code>VOID = 326;</code>
       */
      public static final int VOID_VALUE = 326;
      /**
       * <pre>
       * functions
       * </pre>
       *
       * <code>RETURN = 327;</code>
       */
      public static final int RETURN_VALUE = 327;
      /**
       * <pre>
       * cpp
       * </pre>
       *
       * <code>INCLUDE = 328;</code>
       */
      public static final int INCLUDE_VALUE = 328;
      /**
       * <code>DEFINE = 329;</code>
       */
      public static final int DEFINE_VALUE = 329;
      /**
       * <code>ELIF = 330;</code>
       */
      public static final int ELIF_VALUE = 330;
      /**
       * <code>ENDIF = 331;</code>
       */
      public static final int ENDIF_VALUE = 331;
      /**
       * <code>ERRORPREC = 332;</code>
       */
      public static final int ERRORPREC_VALUE = 332;
      /**
       * <code>WARNING = 333;</code>
       */
      public static final int WARNING_VALUE = 333;
      /**
       * <code>IFDEF = 334;</code>
       */
      public static final int IFDEF_VALUE = 334;
      /**
       * <code>IFNDEF = 335;</code>
       */
      public static final int IFNDEF_VALUE = 335;
      /**
       * <code>LINE = 336;</code>
       */
      public static final int LINE_VALUE = 336;
      /**
       * <code>PRAGMA = 337;</code>
       */
      public static final int PRAGMA_VALUE = 337;
      /**
       * <code>UNDEF = 338;</code>
       */
      public static final int UNDEF_VALUE = 338;
      /**
       * <code>INLINE = 339;</code>
       */
      public static final int INLINE_VALUE = 339;
      /**
       * <pre>
       * macro
       * </pre>
       *
       * <code>MACRO_TYPE_NAME = 340;</code>
       */
      public static final int MACRO_TYPE_NAME_VALUE = 340;
      /**
       * <code>MACRO_CASE = 341;</code>
       */
      public static final int MACRO_CASE_VALUE = 341;
      /**
       * <code>MACRO_LABEL = 342;</code>
       */
      public static final int MACRO_LABEL_VALUE = 342;
      /**
       * <pre>
       * MACRO_SPECIFIER = 343;
       * </pre>
       *
       * <code>SPECIFIER = 344;</code>
       */
      public static final int SPECIFIER_VALUE = 344;
      /**
       * <pre>
       * specifiers that are not needed for parsing
       * exception handling
       * </pre>
       *
       * <code>TRY = 345;</code>
       */
      public static final int TRY_VALUE = 345;
      /**
       * <code>CATCH = 346;</code>
       */
      public static final int CATCH_VALUE = 346;
      /**
       * <code>THROW = 347;</code>
       */
      public static final int THROW_VALUE = 347;
      /**
       * <code>THROWS = 348;</code>
       */
      public static final int THROWS_VALUE = 348;
      /**
       * <pre>
       * class
       * CLASS = 349;
       * </pre>
       *
       * <code>PUBLIC = 350;</code>
       */
      public static final int PUBLIC_VALUE = 350;
      /**
       * <code>PRIVATE = 351;</code>
       */
      public static final int PRIVATE_VALUE = 351;
      /**
       * <code>PROTECTED = 352;</code>
       */
      public static final int PROTECTED_VALUE = 352;
      /**
       * <code>VIRTUAL = 353;</code>
       */
      public static final int VIRTUAL_VALUE = 353;
      /**
       * <pre>
       * FRIEND = 354;
       * OPERATOR = 355;
       * </pre>
       *
       * <code>EXPLICIT = 356;</code>
       */
      public static final int EXPLICIT_VALUE = 356;
      /**
       * <pre>
       * Qt
       * </pre>
       *
       * <code>FOREVER = 357;</code>
       */
      public static final int FOREVER_VALUE = 357;
      /**
       * <code>SIGNAL = 358;</code>
       */
      public static final int SIGNAL_VALUE = 358;
      /**
       * <code>EMIT = 359;</code>
       */
      public static final int EMIT_VALUE = 359;
      /**
       * <pre>
       * namespaces
       * NAMESPACE = 360;
       * USING = 361;
       * templates
       * TEMPLATE = 362;
       * </pre>
       *
       * <code>NEW = 363;</code>
       */
      public static final int NEW_VALUE = 363;
      /**
       * <code>DELETE = 364;</code>
       */
      public static final int DELETE_VALUE = 364;
      /**
       * <pre>
       * specifiers
       * </pre>
       *
       * <code>STATIC = 365;</code>
       */
      public static final int STATIC_VALUE = 365;
      /**
       * <code>CONST = 366;</code>
       */
      public static final int CONST_VALUE = 366;
      /**
       * <code>MUTABLE = 367;</code>
       */
      public static final int MUTABLE_VALUE = 367;
      /**
       * <code>VOLATILE = 368;</code>
       */
      public static final int VOLATILE_VALUE = 368;
      /**
       * <code>TRANSIENT = 369;</code>
       */
      public static final int TRANSIENT_VALUE = 369;
      /**
       * <pre>
       * Java tokens
       * IMPORT = 370;
       * PACKAGE = 371;
       * </pre>
       *
       * <code>FINALLY = 372;</code>
       */
      public static final int FINALLY_VALUE = 372;
      /**
       * <pre>
       * EXTENDS = 373;
       * IMPLEMENTS = 374;
       * INTERFACE = 375;
       * </pre>
       *
       * <code>FINAL = 376;</code>
       */
      public static final int FINAL_VALUE = 376;
      /**
       * <code>ABSTRACT = 377;</code>
       */
      public static final int ABSTRACT_VALUE = 377;
      /**
       * <code>SUPER = 378;</code>
       */
      public static final int SUPER_VALUE = 378;
      /**
       * <code>SYNCHRONIZED = 379;</code>
       */
      public static final int SYNCHRONIZED_VALUE = 379;
      /**
       * <code>NATIVE = 380;</code>
       */
      public static final int NATIVE_VALUE = 380;
      /**
       * <code>STRICTFP = 381;</code>
       */
      public static final int STRICTFP_VALUE = 381;
      /**
       * <code>NULLLITERAL = 382;</code>
       */
      public static final int NULLLITERAL_VALUE = 382;
      /**
       * <code>ASSERT = 383;</code>
       */
      public static final int ASSERT_VALUE = 383;
      /**
       * <pre>
       * C# tokens
       * </pre>
       *
       * <code>FOREACH = 384;</code>
       */
      public static final int FOREACH_VALUE = 384;
      /**
       * <code>REF = 385;</code>
       */
      public static final int REF_VALUE = 385;
      /**
       * <code>OUT = 386;</code>
       */
      public static final int OUT_VALUE = 386;
      /**
       * <pre>
       * IN = 387;
       * </pre>
       *
       * <code>LOCK = 388;</code>
       */
      public static final int LOCK_VALUE = 388;
      /**
       * <code>IS = 389;</code>
       */
      public static final int IS_VALUE = 389;
      /**
       * <code>INTERNAL = 390;</code>
       */
      public static final int INTERNAL_VALUE = 390;
      /**
       * <code>SEALED = 391;</code>
       */
      public static final int SEALED_VALUE = 391;
      /**
       * <code>OVERRIDE = 392;</code>
       */
      public static final int OVERRIDE_VALUE = 392;
      /**
       * <code>IMPLICIT = 393;</code>
       */
      public static final int IMPLICIT_VALUE = 393;
      /**
       * <code>STACKALLOC = 394;</code>
       */
      public static final int STACKALLOC_VALUE = 394;
      /**
       * <code>AS = 395;</code>
       */
      public static final int AS_VALUE = 395;
      /**
       * <code>DELEGATE = 396;</code>
       */
      public static final int DELEGATE_VALUE = 396;
      /**
       * <code>FIXED = 397;</code>
       */
      public static final int FIXED_VALUE = 397;
      /**
       * <code>CHECKED = 398;</code>
       */
      public static final int CHECKED_VALUE = 398;
      /**
       * <code>UNCHECKED = 399;</code>
       */
      public static final int UNCHECKED_VALUE = 399;
      /**
       * <code>REGION = 400;</code>
       */
      public static final int REGION_VALUE = 400;
      /**
       * <code>ENDREGION = 401;</code>
       */
      public static final int ENDREGION_VALUE = 401;
      /**
       * <code>UNSAFE = 402;</code>
       */
      public static final int UNSAFE_VALUE = 402;
      /**
       * <code>READONLY = 403;</code>
       */
      public static final int READONLY_VALUE = 403;
      /**
       * <code>GET = 404;</code>
       */
      public static final int GET_VALUE = 404;
      /**
       * <code>SET = 405;</code>
       */
      public static final int SET_VALUE = 405;
      /**
       * <code>ADD = 406;</code>
       */
      public static final int ADD_VALUE = 406;
      /**
       * <code>REMOVE = 407;</code>
       */
      public static final int REMOVE_VALUE = 407;
      /**
       * <code>YIELD = 408;</code>
       */
      public static final int YIELD_VALUE = 408;
      /**
       * <code>PARTIAL = 409;</code>
       */
      public static final int PARTIAL_VALUE = 409;
      /**
       * <code>AWAIT = 410;</code>
       */
      public static final int AWAIT_VALUE = 410;
      /**
       * <pre>
       * EVENT = 411;
       * </pre>
       *
       * <code>ASYNC = 412;</code>
       */
      public static final int ASYNC_VALUE = 412;
      /**
       * <code>THIS = 413;</code>
       */
      public static final int THIS_VALUE = 413;
      /**
       * <code>PARAMS = 414;</code>
       */
      public static final int PARAMS_VALUE = 414;
      /**
       * <pre>
       * TYPEOF = 415;
       * </pre>
       *
       * <code>ALIAS = 416;</code>
       */
      public static final int ALIAS_VALUE = 416;
      /**
       * <pre>
       * linq
       * FROM = 417;
       * WHERE = 418;
       * SELECT = 419;
       * LET = 420;
       * ORDERBY = 421;
       * </pre>
       *
       * <code>ASCENDING = 422;</code>
       */
      public static final int ASCENDING_VALUE = 422;
      /**
       * <code>DESCENDING = 423;</code>
       */
      public static final int DESCENDING_VALUE = 423;
      /**
       * <pre>
       * GROUP = 424;
       * BY = 425;
       * JOIN = 426;
       * ON = 427;
       * EQUALS = 428;
       * INTO = 429;
       * Objective-C
       * </pre>
       *
       * <code>ATINTERFACE = 430;</code>
       */
      public static final int ATINTERFACE_VALUE = 430;
      /**
       * <code>ATIMPLEMENTATION = 431;</code>
       */
      public static final int ATIMPLEMENTATION_VALUE = 431;
      /**
       * <code>ATEND = 432;</code>
       */
      public static final int ATEND_VALUE = 432;
      /**
       * <code>ATPROTOCOL = 433;</code>
       */
      public static final int ATPROTOCOL_VALUE = 433;
      /**
       * <code>ATREQUIRED = 434;</code>
       */
      public static final int ATREQUIRED_VALUE = 434;
      /**
       * <code>ATOPTIONAL = 435;</code>
       */
      public static final int ATOPTIONAL_VALUE = 435;
      /**
       * <pre>
       * PROPERTY = 436;
       * SYNTHESIZE = 437;
       * DYNAMIC = 438;
       * ENCODE = 439;
       * SELECTOR = 440;
       * </pre>
       *
       * <code>ATCLASS = 441;</code>
       */
      public static final int ATCLASS_VALUE = 441;
      /**
       * <pre>
       * Apple
       * BLOCK = 442;
       * </pre>
       *
       * <code>WEAK = 443;</code>
       */
      public static final int WEAK_VALUE = 443;
      /**
       * <code>STRONG = 444;</code>
       */
      public static final int STRONG_VALUE = 444;
      /**
       * <pre>
       * AUTORELEASEPOOL = 445;
       * COMPATIBILITY_ALIAS = 446;
       * NIL = 447;
       * OpenMp
       * </pre>
       *
       * <code>OMP_OMP = 448;</code>
       */
      public static final int OMP_OMP_VALUE = 448;
      /**
       * <code>SPECIAL_CHARS = 449;</code>
       */
      public static final int SPECIAL_CHARS_VALUE = 449;


      public final int getNumber() {
        if (this == UNRECOGNIZED) {
          throw new java.lang.IllegalArgumentException(
              "Can't get the number of an unknown enum value.");
        }
        return value;
      }

      /**
       * @deprecated Use {@link #forNumber(int)} instead.
       */
      @java.lang.Deprecated
      public static Kind valueOf(int value) {
        return forNumber(value);
      }

      public static Kind forNumber(int value) {
        switch (value) {
          case 0: return UNIT_KIND;
          case 1: return DECL;
          case 2: return DECL_STMT;
          case 3: return INIT;
          case 4: return EXPR;
          case 5: return EXPR_STMT;
          case 6: return COMMENT;
          case 7: return CALL;
          case 8: return CONTROL;
          case 9: return INCR;
          case 10: return NONE;
          case 11: return VARIABLE;
          case 12: return FUNCTION;
          case 13: return FUNCTION_DECL;
          case 14: return CONSTRUCTOR;
          case 15: return CONSTRUCTOR_DECL;
          case 16: return DESTRUCTOR;
          case 17: return DESTRUCTOR_DECL;
          case 18: return MACRO;
          case 19: return SINGLE_MACRO;
          case 20: return NULLOPERATOR;
          case 21: return ENUM_DEFN;
          case 22: return ENUM_DECL;
          case 23: return GLOBAL_ATTRIBUTE;
          case 24: return PROPERTY_ACCESSOR;
          case 25: return PROPERTY_ACCESSOR_DECL;
          case 26: return EXPRESSION;
          case 27: return CLASS_DEFN;
          case 28: return CLASS_DECL;
          case 29: return UNION_DEFN;
          case 30: return UNION_DECL;
          case 31: return STRUCT_DEFN;
          case 32: return STRUCT_DECL;
          case 33: return INTERFACE_DEFN;
          case 34: return INTERFACE_DECL;
          case 35: return ACCESS_REGION;
          case 36: return USING;
          case 37: return OPERATOR_FUNCTION;
          case 38: return OPERATOR_FUNCTION_DECL;
          case 39: return EVENT;
          case 40: return PROPERTY;
          case 41: return ANNOTATION_DEFN;
          case 42: return GLOBAL_TEMPLATE;
          case 43: return UNIT;
          case 44: return TART_ELEMENT_TOKEN;
          case 45: return NOP;
          case 46: return STRING;
          case 47: return CHAR;
          case 48: return LITERAL;
          case 49: return BOOLEAN;
          case 50: return NULL;
          case 51: return COMPLEX;
          case 52: return OPERATOR;
          case 53: return MODIFIER;
          case 54: return NAME;
          case 55: return ONAME;
          case 56: return CNAME;
          case 57: return TYPE;
          case 58: return TYPEPREV;
          case 59: return CONDITION;
          case 60: return BLOCK;
          case 61: return PSEUDO_BLOCK;
          case 62: return INDEX;
          case 63: return ENUM;
          case 64: return ENUM_DECLARATION;
          case 65: return IF_STATEMENT;
          case 66: return TERNARY;
          case 67: return THEN;
          case 68: return ELSE;
          case 69: return ELSEIF;
          case 70: return WHILE_STATEMENT;
          case 71: return DO_STATEMENT;
          case 72: return FOR_STATEMENT;
          case 73: return FOREACH_STATEMENT;
          case 74: return FOR_CONTROL;
          case 75: return FOR_INITIALIZATION;
          case 76: return FOR_CONDITION;
          case 77: return FOR_INCREMENT;
          case 78: return FOR_LIKE_CONTROL;
          case 79: return EXPRESSION_STATEMENT;
          case 81: return FUNCTION_CALL;
          case 82: return DECLARATION_STATEMENT;
          case 83: return DECLARATION;
          case 84: return DECLARATION_INITIALIZATION;
          case 85: return DECLARATION_RANGE;
          case 86: return RANGE;
          case 87: return GOTO_STATEMENT;
          case 88: return CONTINUE_STATEMENT;
          case 89: return BREAK_STATEMENT;
          case 90: return LABEL_STATEMENT;
          case 91: return LABEL;
          case 92: return SWITCH;
          case 93: return CASE;
          case 94: return DEFAULT;
          case 95: return FUNCTION_DEFINITION;
          case 96: return FUNCTION_DECLARATION;
          case 97: return LAMBDA;
          case 98: return FUNCTION_LAMBDA;
          case 99: return FUNCTION_SPECIFIER;
          case 100: return RETURN_STATEMENT;
          case 101: return PARAMETER_LIST;
          case 102: return PARAMETER;
          case 103: return KRPARAMETER_LIST;
          case 104: return KRPARAMETER;
          case 105: return ARGUMENT_LIST;
          case 106: return ARGUMENT;
          case 107: return PSEUDO_PARAMETER_LIST;
          case 108: return INDEXER_PARAMETER_LIST;
          case 109: return CLASS;
          case 110: return CLASS_DECLARATION;
          case 111: return STRUCT;
          case 112: return STRUCT_DECLARATION;
          case 113: return UNION;
          case 114: return UNION_DECLARATION;
          case 115: return DERIVATION_LIST;
          case 116: return PUBLIC_ACCESS;
          case 117: return PUBLIC_ACCESS_DEFAULT;
          case 118: return PRIVATE_ACCESS;
          case 119: return PRIVATE_ACCESS_DEFAULT;
          case 120: return PROTECTED_ACCESS;
          case 121: return PROTECTED_ACCESS_DEFAULT;
          case 122: return MEMBER_INIT_LIST;
          case 123: return MEMBER_INITIALIZATION_LIST;
          case 124: return MEMBER_INITIALIZATION;
          case 125: return CONSTRUCTOR_DEFINITION;
          case 126: return CONSTRUCTOR_DECLARATION;
          case 127: return DESTRUCTOR_DEFINITION;
          case 128: return DESTRUCTOR_DECLARATION;
          case 129: return FRIEND;
          case 130: return CLASS_SPECIFIER;
          case 131: return TRY_BLOCK;
          case 132: return CATCH_BLOCK;
          case 133: return FINALLY_BLOCK;
          case 134: return THROW_STATEMENT;
          case 135: return THROW_SPECIFIER;
          case 136: return THROW_SPECIFIER_JAVA;
          case 137: return TEMPLATE;
          case 138: return GENERIC_ARGUMENT;
          case 139: return GENERIC_ARGUMENT_LIST;
          case 140: return TEMPLATE_PARAMETER;
          case 141: return TEMPLATE_PARAMETER_LIST;
          case 142: return GENERIC_PARAMETER;
          case 143: return GENERIC_PARAMETER_LIST;
          case 144: return TYPEDEF;
          case 145: return ASM;
          case 146: return MACRO_CALL;
          case 147: return SIZEOF_CALL;
          case 148: return EXTERN;
          case 149: return NAMESPACE;
          case 150: return USING_DIRECTIVE;
          case 151: return DIRECTIVE;
          case 152: return ATOMIC;
          case 153: return STATIC_ASSERT_STATEMENT;
          case 154: return GENERIC_SELECTION;
          case 155: return GENERIC_SELECTOR;
          case 156: return GENERIC_ASSOCIATION_LIST;
          case 157: return GENERIC_ASSOCIATION;
          case 158: return ALIGNAS;
          case 159: return DECLTYPE;
          case 160: return CAPTURE;
          case 161: return LAMBDA_CAPTURE;
          case 162: return NOEXCEPT;
          case 163: return TYPENAME;
          case 164: return ALIGNOF;
          case 165: return TYPEID;
          case 166: return SIZEOF_PACK;
          case 167: return ENUM_CLASS;
          case 168: return ENUM_CLASS_DECLARATION;
          case 171: return REF_QUALIFIER;
          case 172: return SIGNAL_ACCESS;
          case 173: return FOREVER_STATEMENT;
          case 174: return EMIT_STATEMENT;
          case 175: return CPP_DIRECTIVE;
          case 176: return CPP_FILENAME;
          case 177: return FILE;
          case 178: return NUMBER;
          case 179: return CPP_NUMBER;
          case 180: return CPP_LITERAL;
          case 181: return CPP_MACRO_DEFN;
          case 182: return CPP_MACRO_VALUE;
          case 183: return ERROR;
          case 184: return CPP_ERROR;
          case 185: return CPP_WARNING;
          case 186: return CPP_PRAGMA;
          case 187: return CPP_INCLUDE;
          case 188: return CPP_DEFINE;
          case 189: return CPP_UNDEF;
          case 190: return CPP_LINE;
          case 191: return CPP_IF;
          case 192: return CPP_IFDEF;
          case 193: return CPP_IFNDEF;
          case 194: return CPP_THEN;
          case 195: return CPP_ELSE;
          case 196: return CPP_ELIF;
          case 197: return CPP_EMPTY;
          case 198: return CPP_REGION;
          case 199: return CPP_ENDREGION;
          case 200: return USING_STMT;
          case 201: return ESCAPE;
          case 202: return VALUE;
          case 203: return CPP_IMPORT;
          case 204: return CPP_ENDIF;
          case 205: return MARKER;
          case 206: return ERROR_PARSE;
          case 207: return ERROR_MODE;
          case 208: return IMPLEMENTS;
          case 209: return EXTENDS;
          case 210: return IMPORT;
          case 211: return PACKAGE;
          case 212: return ASSERT_STATEMENT;
          case 213: return INTERFACE;
          case 214: return INTERFACE_DECLARATION;
          case 215: return SYNCHRONIZED_STATEMENT;
          case 216: return ANNOTATION;
          case 218: return STATIC_BLOCK;
          case 219: return CHECKED_STATEMENT;
          case 220: return UNCHECKED_STATEMENT;
          case 221: return ATTRIBUTE;
          case 222: return TARGET;
          case 223: return UNSAFE_STATEMENT;
          case 224: return LOCK_STATEMENT;
          case 225: return FIXED_STATEMENT;
          case 226: return TYPEOF;
          case 227: return USING_STATEMENT;
          case 228: return FUNCTION_DELEGATE;
          case 230: return CONSTRAINT;
          case 231: return LINQ;
          case 232: return FROM;
          case 233: return WHERE;
          case 234: return SELECT;
          case 235: return LET;
          case 236: return ORDERBY;
          case 237: return JOIN;
          case 238: return GROUP;
          case 239: return IN;
          case 240: return ON;
          case 241: return EQUALS;
          case 242: return BY;
          case 243: return INTO;
          case 244: return EMPTY;
          case 245: return EMPTY_STMT;
          case 246: return RECEIVER;
          case 247: return MESSAGE;
          case 248: return SELECTOR;
          case 249: return PROTOCOL_LIST;
          case 250: return CATEGORY;
          case 251: return PROTOCOL;
          case 252: return REQUIRED_DEFAULT;
          case 253: return REQUIRED;
          case 254: return OPTIONAL;
          case 256: return ATTRIBUTE_LIST;
          case 257: return SYNTHESIZE;
          case 258: return DYNAMIC;
          case 259: return ENCODE;
          case 260: return AUTORELEASEPOOL;
          case 261: return COMPATIBILITY_ALIAS;
          case 262: return NIL;
          case 263: return CLASS_INTERFACE;
          case 264: return CLASS_IMPLEMENTATION;
          case 265: return PROTOCOL_DECLARATION;
          case 266: return CAST;
          case 267: return CONST_CAST;
          case 268: return DYNAMIC_CAST;
          case 269: return REINTERPRET_CAST;
          case 270: return STATIC_CAST;
          case 271: return POSITION;
          case 272: return CUDA_ARGUMENT_LIST;
          case 273: return OMP_DIRECTIVE;
          case 274: return OMP_NAME;
          case 275: return OMP_CLAUSE;
          case 276: return OMP_ARGUMENT_LIST;
          case 277: return OMP_ARGUMENT;
          case 278: return OMP_EXPRESSION;
          case 279: return END_ELEMENT_TOKEN;
          case 280: return MAIN;
          case 281: return BREAK;
          case 282: return CONTINUE;
          case 283: return WHILE;
          case 284: return DO;
          case 285: return FOR;
          case 286: return IF;
          case 293: return GOTO;
          case 295: return VISUAL_CXX_ASM;
          case 296: return SIZEOF;
          case 298: return AUTO;
          case 299: return REGISTER;
          case 300: return RESTRICT;
          case 304: return IMAGINARY;
          case 305: return NORETURN;
          case 306: return STATIC_ASSERT;
          case 307: return CRESTRICT;
          case 308: return CXX_TRY;
          case 309: return CXX_CATCH;
          case 310: return CXX_CLASS;
          case 311: return CONSTEXPR;
          case 313: return THREAD_LOCAL;
          case 314: return NULLPTR;
          case 326: return VOID;
          case 327: return RETURN;
          case 328: return INCLUDE;
          case 329: return DEFINE;
          case 330: return ELIF;
          case 331: return ENDIF;
          case 332: return ERRORPREC;
          case 333: return WARNING;
          case 334: return IFDEF;
          case 335: return IFNDEF;
          case 336: return LINE;
          case 337: return PRAGMA;
          case 338: return UNDEF;
          case 339: return INLINE;
          case 340: return MACRO_TYPE_NAME;
          case 341: return MACRO_CASE;
          case 342: return MACRO_LABEL;
          case 344: return SPECIFIER;
          case 345: return TRY;
          case 346: return CATCH;
          case 347: return THROW;
          case 348: return THROWS;
          case 350: return PUBLIC;
          case 351: return PRIVATE;
          case 352: return PROTECTED;
          case 353: return VIRTUAL;
          case 356: return EXPLICIT;
          case 357: return FOREVER;
          case 358: return SIGNAL;
          case 359: return EMIT;
          case 363: return NEW;
          case 364: return DELETE;
          case 365: return STATIC;
          case 366: return CONST;
          case 367: return MUTABLE;
          case 368: return VOLATILE;
          case 369: return TRANSIENT;
          case 372: return FINALLY;
          case 376: return FINAL;
          case 377: return ABSTRACT;
          case 378: return SUPER;
          case 379: return SYNCHRONIZED;
          case 380: return NATIVE;
          case 381: return STRICTFP;
          case 382: return NULLLITERAL;
          case 383: return ASSERT;
          case 384: return FOREACH;
          case 385: return REF;
          case 386: return OUT;
          case 388: return LOCK;
          case 389: return IS;
          case 390: return INTERNAL;
          case 391: return SEALED;
          case 392: return OVERRIDE;
          case 393: return IMPLICIT;
          case 394: return STACKALLOC;
          case 395: return AS;
          case 396: return DELEGATE;
          case 397: return FIXED;
          case 398: return CHECKED;
          case 399: return UNCHECKED;
          case 400: return REGION;
          case 401: return ENDREGION;
          case 402: return UNSAFE;
          case 403: return READONLY;
          case 404: return GET;
          case 405: return SET;
          case 406: return ADD;
          case 407: return REMOVE;
          case 408: return YIELD;
          case 409: return PARTIAL;
          case 410: return AWAIT;
          case 412: return ASYNC;
          case 413: return THIS;
          case 414: return PARAMS;
          case 416: return ALIAS;
          case 422: return ASCENDING;
          case 423: return DESCENDING;
          case 430: return ATINTERFACE;
          case 431: return ATIMPLEMENTATION;
          case 432: return ATEND;
          case 433: return ATPROTOCOL;
          case 434: return ATREQUIRED;
          case 435: return ATOPTIONAL;
          case 441: return ATCLASS;
          case 443: return WEAK;
          case 444: return STRONG;
          case 448: return OMP_OMP;
          case 449: return SPECIAL_CHARS;
          default: return null;
        }
      }

      public static com.google.protobuf.Internal.EnumLiteMap<Kind>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static final com.google.protobuf.Internal.EnumLiteMap<
          Kind> internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<Kind>() {
              public Kind findValueByNumber(int number) {
                return Kind.forNumber(number);
              }
            };

      public final com.google.protobuf.Descriptors.EnumValueDescriptor
          getValueDescriptor() {
        return getDescriptor().getValues().get(ordinal());
      }
      public final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptorForType() {
        return getDescriptor();
      }
      public static final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptor() {
        return fast.Fast.Element.getDescriptor().getEnumTypes().get(0);
      }

      private static final Kind[] VALUES = values();

      public static Kind valueOf(
          com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
        if (desc.getType() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "EnumValueDescriptor is not for this type.");
        }
        if (desc.getIndex() == -1) {
          return UNRECOGNIZED;
        }
        return VALUES[desc.getIndex()];
      }

      private final int value;

      private Kind(int value) {
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:fast.Element.Kind)
    }

    public interface UnitOrBuilder extends
        // @@protoc_insertion_point(interface_extends:fast.Element.Unit)
        com.google.protobuf.MessageOrBuilder {

      /**
       * <code>string filename = 1;</code>
       */
      java.lang.String getFilename();
      /**
       * <code>string filename = 1;</code>
       */
      com.google.protobuf.ByteString
          getFilenameBytes();

      /**
       * <code>string revision = 2;</code>
       */
      java.lang.String getRevision();
      /**
       * <code>string revision = 2;</code>
       */
      com.google.protobuf.ByteString
          getRevisionBytes();

      /**
       * <code>.fast.Element.Unit.LanguageType language = 3;</code>
       */
      int getLanguageValue();
      /**
       * <code>.fast.Element.Unit.LanguageType language = 3;</code>
       */
      fast.Fast.Element.Unit.LanguageType getLanguage();

      /**
       * <code>int32 item = 4;</code>
       */
      int getItem();
    }
    /**
     * Protobuf type {@code fast.Element.Unit}
     */
    public  static final class Unit extends
        com.google.protobuf.GeneratedMessageV3 implements
        // @@protoc_insertion_point(message_implements:fast.Element.Unit)
        UnitOrBuilder {
      // Use Unit.newBuilder() to construct.
      private Unit(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
        super(builder);
      }
      private Unit() {
        filename_ = "";
        revision_ = "";
        language_ = 0;
        item_ = 0;
      }

      @java.lang.Override
      public final com.google.protobuf.UnknownFieldSet
      getUnknownFields() {
        return com.google.protobuf.UnknownFieldSet.getDefaultInstance();
      }
      private Unit(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        this();
        int mutable_bitField0_ = 0;
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              default: {
                if (!input.skipField(tag)) {
                  done = true;
                }
                break;
              }
              case 10: {
                java.lang.String s = input.readStringRequireUtf8();

                filename_ = s;
                break;
              }
              case 18: {
                java.lang.String s = input.readStringRequireUtf8();

                revision_ = s;
                break;
              }
              case 24: {
                int rawValue = input.readEnum();

                language_ = rawValue;
                break;
              }
              case 32: {

                item_ = input.readInt32();
                break;
              }
            }
          }
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(this);
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(
              e).setUnfinishedMessage(this);
        } finally {
          makeExtensionsImmutable();
        }
      }
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return fast.Fast.internal_static_fast_Element_Unit_descriptor;
      }

      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return fast.Fast.internal_static_fast_Element_Unit_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                fast.Fast.Element.Unit.class, fast.Fast.Element.Unit.Builder.class);
      }

      /**
       * Protobuf enum {@code fast.Element.Unit.LanguageType}
       */
      public enum LanguageType
          implements com.google.protobuf.ProtocolMessageEnum {
        /**
         * <code>ALL = 0;</code>
         */
        ALL(0),
        /**
         * <code>OO = 1;</code>
         */
        OO(1),
        /**
         * <code>CXX = 2;</code>
         */
        CXX(2),
        /**
         * <code>C = 3;</code>
         */
        C(3),
        /**
         * <code>C_FAMILY = 4;</code>
         */
        C_FAMILY(4),
        /**
         * <code>JAVA = 5;</code>
         */
        JAVA(5),
        /**
         * <code>CSHARP = 6;</code>
         */
        CSHARP(6),
        /**
         * <code>OBJECTIVE_C = 7;</code>
         */
        OBJECTIVE_C(7),
        UNRECOGNIZED(-1),
        ;

        /**
         * <code>ALL = 0;</code>
         */
        public static final int ALL_VALUE = 0;
        /**
         * <code>OO = 1;</code>
         */
        public static final int OO_VALUE = 1;
        /**
         * <code>CXX = 2;</code>
         */
        public static final int CXX_VALUE = 2;
        /**
         * <code>C = 3;</code>
         */
        public static final int C_VALUE = 3;
        /**
         * <code>C_FAMILY = 4;</code>
         */
        public static final int C_FAMILY_VALUE = 4;
        /**
         * <code>JAVA = 5;</code>
         */
        public static final int JAVA_VALUE = 5;
        /**
         * <code>CSHARP = 6;</code>
         */
        public static final int CSHARP_VALUE = 6;
        /**
         * <code>OBJECTIVE_C = 7;</code>
         */
        public static final int OBJECTIVE_C_VALUE = 7;


        public final int getNumber() {
          if (this == UNRECOGNIZED) {
            throw new java.lang.IllegalArgumentException(
                "Can't get the number of an unknown enum value.");
          }
          return value;
        }

        /**
         * @deprecated Use {@link #forNumber(int)} instead.
         */
        @java.lang.Deprecated
        public static LanguageType valueOf(int value) {
          return forNumber(value);
        }

        public static LanguageType forNumber(int value) {
          switch (value) {
            case 0: return ALL;
            case 1: return OO;
            case 2: return CXX;
            case 3: return C;
            case 4: return C_FAMILY;
            case 5: return JAVA;
            case 6: return CSHARP;
            case 7: return OBJECTIVE_C;
            default: return null;
          }
        }

        public static com.google.protobuf.Internal.EnumLiteMap<LanguageType>
            internalGetValueMap() {
          return internalValueMap;
        }
        private static final com.google.protobuf.Internal.EnumLiteMap<
            LanguageType> internalValueMap =
              new com.google.protobuf.Internal.EnumLiteMap<LanguageType>() {
                public LanguageType findValueByNumber(int number) {
                  return LanguageType.forNumber(number);
                }
              };

        public final com.google.protobuf.Descriptors.EnumValueDescriptor
            getValueDescriptor() {
          return getDescriptor().getValues().get(ordinal());
        }
        public final com.google.protobuf.Descriptors.EnumDescriptor
            getDescriptorForType() {
          return getDescriptor();
        }
        public static final com.google.protobuf.Descriptors.EnumDescriptor
            getDescriptor() {
          return fast.Fast.Element.Unit.getDescriptor().getEnumTypes().get(0);
        }

        private static final LanguageType[] VALUES = values();

        public static LanguageType valueOf(
            com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
          if (desc.getType() != getDescriptor()) {
            throw new java.lang.IllegalArgumentException(
              "EnumValueDescriptor is not for this type.");
          }
          if (desc.getIndex() == -1) {
            return UNRECOGNIZED;
          }
          return VALUES[desc.getIndex()];
        }

        private final int value;

        private LanguageType(int value) {
          this.value = value;
        }

        // @@protoc_insertion_point(enum_scope:fast.Element.Unit.LanguageType)
      }

      public static final int FILENAME_FIELD_NUMBER = 1;
      private volatile java.lang.Object filename_;
      /**
       * <code>string filename = 1;</code>
       */
      public java.lang.String getFilename() {
        java.lang.Object ref = filename_;
        if (ref instanceof java.lang.String) {
          return (java.lang.String) ref;
        } else {
          com.google.protobuf.ByteString bs = 
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          filename_ = s;
          return s;
        }
      }
      /**
       * <code>string filename = 1;</code>
       */
      public com.google.protobuf.ByteString
          getFilenameBytes() {
        java.lang.Object ref = filename_;
        if (ref instanceof java.lang.String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          filename_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }

      public static final int REVISION_FIELD_NUMBER = 2;
      private volatile java.lang.Object revision_;
      /**
       * <code>string revision = 2;</code>
       */
      public java.lang.String getRevision() {
        java.lang.Object ref = revision_;
        if (ref instanceof java.lang.String) {
          return (java.lang.String) ref;
        } else {
          com.google.protobuf.ByteString bs = 
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          revision_ = s;
          return s;
        }
      }
      /**
       * <code>string revision = 2;</code>
       */
      public com.google.protobuf.ByteString
          getRevisionBytes() {
        java.lang.Object ref = revision_;
        if (ref instanceof java.lang.String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          revision_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }

      public static final int LANGUAGE_FIELD_NUMBER = 3;
      private int language_;
      /**
       * <code>.fast.Element.Unit.LanguageType language = 3;</code>
       */
      public int getLanguageValue() {
        return language_;
      }
      /**
       * <code>.fast.Element.Unit.LanguageType language = 3;</code>
       */
      public fast.Fast.Element.Unit.LanguageType getLanguage() {
        fast.Fast.Element.Unit.LanguageType result = fast.Fast.Element.Unit.LanguageType.valueOf(language_);
        return result == null ? fast.Fast.Element.Unit.LanguageType.UNRECOGNIZED : result;
      }

      public static final int ITEM_FIELD_NUMBER = 4;
      private int item_;
      /**
       * <code>int32 item = 4;</code>
       */
      public int getItem() {
        return item_;
      }

      private byte memoizedIsInitialized = -1;
      public final boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized == 1) return true;
        if (isInitialized == 0) return false;

        memoizedIsInitialized = 1;
        return true;
      }

      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        if (!getFilenameBytes().isEmpty()) {
          com.google.protobuf.GeneratedMessageV3.writeString(output, 1, filename_);
        }
        if (!getRevisionBytes().isEmpty()) {
          com.google.protobuf.GeneratedMessageV3.writeString(output, 2, revision_);
        }
        if (language_ != fast.Fast.Element.Unit.LanguageType.ALL.getNumber()) {
          output.writeEnum(3, language_);
        }
        if (item_ != 0) {
          output.writeInt32(4, item_);
        }
      }

      public int getSerializedSize() {
        int size = memoizedSize;
        if (size != -1) return size;

        size = 0;
        if (!getFilenameBytes().isEmpty()) {
          size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, filename_);
        }
        if (!getRevisionBytes().isEmpty()) {
          size += com.google.protobuf.GeneratedMessageV3.computeStringSize(2, revision_);
        }
        if (language_ != fast.Fast.Element.Unit.LanguageType.ALL.getNumber()) {
          size += com.google.protobuf.CodedOutputStream
            .computeEnumSize(3, language_);
        }
        if (item_ != 0) {
          size += com.google.protobuf.CodedOutputStream
            .computeInt32Size(4, item_);
        }
        memoizedSize = size;
        return size;
      }

      private static final long serialVersionUID = 0L;
      @java.lang.Override
      public boolean equals(final java.lang.Object obj) {
        if (obj == this) {
         return true;
        }
        if (!(obj instanceof fast.Fast.Element.Unit)) {
          return super.equals(obj);
        }
        fast.Fast.Element.Unit other = (fast.Fast.Element.Unit) obj;

        boolean result = true;
        result = result && getFilename()
            .equals(other.getFilename());
        result = result && getRevision()
            .equals(other.getRevision());
        result = result && language_ == other.language_;
        result = result && (getItem()
            == other.getItem());
        return result;
      }

      @java.lang.Override
      public int hashCode() {
        if (memoizedHashCode != 0) {
          return memoizedHashCode;
        }
        int hash = 41;
        hash = (19 * hash) + getDescriptor().hashCode();
        hash = (37 * hash) + FILENAME_FIELD_NUMBER;
        hash = (53 * hash) + getFilename().hashCode();
        hash = (37 * hash) + REVISION_FIELD_NUMBER;
        hash = (53 * hash) + getRevision().hashCode();
        hash = (37 * hash) + LANGUAGE_FIELD_NUMBER;
        hash = (53 * hash) + language_;
        hash = (37 * hash) + ITEM_FIELD_NUMBER;
        hash = (53 * hash) + getItem();
        hash = (29 * hash) + unknownFields.hashCode();
        memoizedHashCode = hash;
        return hash;
      }

      public static fast.Fast.Element.Unit parseFrom(
          java.nio.ByteBuffer data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static fast.Fast.Element.Unit parseFrom(
          java.nio.ByteBuffer data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static fast.Fast.Element.Unit parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static fast.Fast.Element.Unit parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static fast.Fast.Element.Unit parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static fast.Fast.Element.Unit parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static fast.Fast.Element.Unit parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input);
      }
      public static fast.Fast.Element.Unit parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input, extensionRegistry);
      }
      public static fast.Fast.Element.Unit parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseDelimitedWithIOException(PARSER, input);
      }
      public static fast.Fast.Element.Unit parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
      }
      public static fast.Fast.Element.Unit parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input);
      }
      public static fast.Fast.Element.Unit parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input, extensionRegistry);
      }

      public Builder newBuilderForType() { return newBuilder(); }
      public static Builder newBuilder() {
        return DEFAULT_INSTANCE.toBuilder();
      }
      public static Builder newBuilder(fast.Fast.Element.Unit prototype) {
        return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
      }
      public Builder toBuilder() {
        return this == DEFAULT_INSTANCE
            ? new Builder() : new Builder().mergeFrom(this);
      }

      @java.lang.Override
      protected Builder newBuilderForType(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        Builder builder = new Builder(parent);
        return builder;
      }
      /**
       * Protobuf type {@code fast.Element.Unit}
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
          // @@protoc_insertion_point(builder_implements:fast.Element.Unit)
          fast.Fast.Element.UnitOrBuilder {
        public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
          return fast.Fast.internal_static_fast_Element_Unit_descriptor;
        }

        protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
            internalGetFieldAccessorTable() {
          return fast.Fast.internal_static_fast_Element_Unit_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                  fast.Fast.Element.Unit.class, fast.Fast.Element.Unit.Builder.class);
        }

        // Construct using fast.Fast.Element.Unit.newBuilder()
        private Builder() {
          maybeForceBuilderInitialization();
        }

        private Builder(
            com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
          super(parent);
          maybeForceBuilderInitialization();
        }
        private void maybeForceBuilderInitialization() {
          if (com.google.protobuf.GeneratedMessageV3
                  .alwaysUseFieldBuilders) {
          }
        }
        public Builder clear() {
          super.clear();
          filename_ = "";

          revision_ = "";

          language_ = 0;

          item_ = 0;

          return this;
        }

        public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
          return fast.Fast.internal_static_fast_Element_Unit_descriptor;
        }

        public fast.Fast.Element.Unit getDefaultInstanceForType() {
          return fast.Fast.Element.Unit.getDefaultInstance();
        }

        public fast.Fast.Element.Unit build() {
          fast.Fast.Element.Unit result = buildPartial();
          if (!result.isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return result;
        }

        public fast.Fast.Element.Unit buildPartial() {
          fast.Fast.Element.Unit result = new fast.Fast.Element.Unit(this);
          result.filename_ = filename_;
          result.revision_ = revision_;
          result.language_ = language_;
          result.item_ = item_;
          onBuilt();
          return result;
        }

        public Builder clone() {
          return (Builder) super.clone();
        }
        public Builder setField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            Object value) {
          return (Builder) super.setField(field, value);
        }
        public Builder clearField(
            com.google.protobuf.Descriptors.FieldDescriptor field) {
          return (Builder) super.clearField(field);
        }
        public Builder clearOneof(
            com.google.protobuf.Descriptors.OneofDescriptor oneof) {
          return (Builder) super.clearOneof(oneof);
        }
        public Builder setRepeatedField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            int index, Object value) {
          return (Builder) super.setRepeatedField(field, index, value);
        }
        public Builder addRepeatedField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            Object value) {
          return (Builder) super.addRepeatedField(field, value);
        }
        public Builder mergeFrom(com.google.protobuf.Message other) {
          if (other instanceof fast.Fast.Element.Unit) {
            return mergeFrom((fast.Fast.Element.Unit)other);
          } else {
            super.mergeFrom(other);
            return this;
          }
        }

        public Builder mergeFrom(fast.Fast.Element.Unit other) {
          if (other == fast.Fast.Element.Unit.getDefaultInstance()) return this;
          if (!other.getFilename().isEmpty()) {
            filename_ = other.filename_;
            onChanged();
          }
          if (!other.getRevision().isEmpty()) {
            revision_ = other.revision_;
            onChanged();
          }
          if (other.language_ != 0) {
            setLanguageValue(other.getLanguageValue());
          }
          if (other.getItem() != 0) {
            setItem(other.getItem());
          }
          onChanged();
          return this;
        }

        public final boolean isInitialized() {
          return true;
        }

        public Builder mergeFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          fast.Fast.Element.Unit parsedMessage = null;
          try {
            parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            parsedMessage = (fast.Fast.Element.Unit) e.getUnfinishedMessage();
            throw e.unwrapIOException();
          } finally {
            if (parsedMessage != null) {
              mergeFrom(parsedMessage);
            }
          }
          return this;
        }

        private java.lang.Object filename_ = "";
        /**
         * <code>string filename = 1;</code>
         */
        public java.lang.String getFilename() {
          java.lang.Object ref = filename_;
          if (!(ref instanceof java.lang.String)) {
            com.google.protobuf.ByteString bs =
                (com.google.protobuf.ByteString) ref;
            java.lang.String s = bs.toStringUtf8();
            filename_ = s;
            return s;
          } else {
            return (java.lang.String) ref;
          }
        }
        /**
         * <code>string filename = 1;</code>
         */
        public com.google.protobuf.ByteString
            getFilenameBytes() {
          java.lang.Object ref = filename_;
          if (ref instanceof String) {
            com.google.protobuf.ByteString b = 
                com.google.protobuf.ByteString.copyFromUtf8(
                    (java.lang.String) ref);
            filename_ = b;
            return b;
          } else {
            return (com.google.protobuf.ByteString) ref;
          }
        }
        /**
         * <code>string filename = 1;</code>
         */
        public Builder setFilename(
            java.lang.String value) {
          if (value == null) {
    throw new NullPointerException();
  }
  
          filename_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>string filename = 1;</code>
         */
        public Builder clearFilename() {
          
          filename_ = getDefaultInstance().getFilename();
          onChanged();
          return this;
        }
        /**
         * <code>string filename = 1;</code>
         */
        public Builder setFilenameBytes(
            com.google.protobuf.ByteString value) {
          if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
          
          filename_ = value;
          onChanged();
          return this;
        }

        private java.lang.Object revision_ = "";
        /**
         * <code>string revision = 2;</code>
         */
        public java.lang.String getRevision() {
          java.lang.Object ref = revision_;
          if (!(ref instanceof java.lang.String)) {
            com.google.protobuf.ByteString bs =
                (com.google.protobuf.ByteString) ref;
            java.lang.String s = bs.toStringUtf8();
            revision_ = s;
            return s;
          } else {
            return (java.lang.String) ref;
          }
        }
        /**
         * <code>string revision = 2;</code>
         */
        public com.google.protobuf.ByteString
            getRevisionBytes() {
          java.lang.Object ref = revision_;
          if (ref instanceof String) {
            com.google.protobuf.ByteString b = 
                com.google.protobuf.ByteString.copyFromUtf8(
                    (java.lang.String) ref);
            revision_ = b;
            return b;
          } else {
            return (com.google.protobuf.ByteString) ref;
          }
        }
        /**
         * <code>string revision = 2;</code>
         */
        public Builder setRevision(
            java.lang.String value) {
          if (value == null) {
    throw new NullPointerException();
  }
  
          revision_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>string revision = 2;</code>
         */
        public Builder clearRevision() {
          
          revision_ = getDefaultInstance().getRevision();
          onChanged();
          return this;
        }
        /**
         * <code>string revision = 2;</code>
         */
        public Builder setRevisionBytes(
            com.google.protobuf.ByteString value) {
          if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
          
          revision_ = value;
          onChanged();
          return this;
        }

        private int language_ = 0;
        /**
         * <code>.fast.Element.Unit.LanguageType language = 3;</code>
         */
        public int getLanguageValue() {
          return language_;
        }
        /**
         * <code>.fast.Element.Unit.LanguageType language = 3;</code>
         */
        public Builder setLanguageValue(int value) {
          language_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>.fast.Element.Unit.LanguageType language = 3;</code>
         */
        public fast.Fast.Element.Unit.LanguageType getLanguage() {
          fast.Fast.Element.Unit.LanguageType result = fast.Fast.Element.Unit.LanguageType.valueOf(language_);
          return result == null ? fast.Fast.Element.Unit.LanguageType.UNRECOGNIZED : result;
        }
        /**
         * <code>.fast.Element.Unit.LanguageType language = 3;</code>
         */
        public Builder setLanguage(fast.Fast.Element.Unit.LanguageType value) {
          if (value == null) {
            throw new NullPointerException();
          }
          
          language_ = value.getNumber();
          onChanged();
          return this;
        }
        /**
         * <code>.fast.Element.Unit.LanguageType language = 3;</code>
         */
        public Builder clearLanguage() {
          
          language_ = 0;
          onChanged();
          return this;
        }

        private int item_ ;
        /**
         * <code>int32 item = 4;</code>
         */
        public int getItem() {
          return item_;
        }
        /**
         * <code>int32 item = 4;</code>
         */
        public Builder setItem(int value) {
          
          item_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>int32 item = 4;</code>
         */
        public Builder clearItem() {
          
          item_ = 0;
          onChanged();
          return this;
        }
        public final Builder setUnknownFields(
            final com.google.protobuf.UnknownFieldSet unknownFields) {
          return this;
        }

        public final Builder mergeUnknownFields(
            final com.google.protobuf.UnknownFieldSet unknownFields) {
          return this;
        }


        // @@protoc_insertion_point(builder_scope:fast.Element.Unit)
      }

      // @@protoc_insertion_point(class_scope:fast.Element.Unit)
      private static final fast.Fast.Element.Unit DEFAULT_INSTANCE;
      static {
        DEFAULT_INSTANCE = new fast.Fast.Element.Unit();
      }

      public static fast.Fast.Element.Unit getDefaultInstance() {
        return DEFAULT_INSTANCE;
      }

      private static final com.google.protobuf.Parser<Unit>
          PARSER = new com.google.protobuf.AbstractParser<Unit>() {
        public Unit parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
            return new Unit(input, extensionRegistry);
        }
      };

      public static com.google.protobuf.Parser<Unit> parser() {
        return PARSER;
      }

      @java.lang.Override
      public com.google.protobuf.Parser<Unit> getParserForType() {
        return PARSER;
      }

      public fast.Fast.Element.Unit getDefaultInstanceForType() {
        return DEFAULT_INSTANCE;
      }

    }

    public interface LiteralOrBuilder extends
        // @@protoc_insertion_point(interface_extends:fast.Element.Literal)
        com.google.protobuf.MessageOrBuilder {

      /**
       * <code>.fast.Element.Literal.LiteralType type = 1;</code>
       */
      int getTypeValue();
      /**
       * <code>.fast.Element.Literal.LiteralType type = 1;</code>
       */
      fast.Fast.Element.Literal.LiteralType getType();
    }
    /**
     * Protobuf type {@code fast.Element.Literal}
     */
    public  static final class Literal extends
        com.google.protobuf.GeneratedMessageV3 implements
        // @@protoc_insertion_point(message_implements:fast.Element.Literal)
        LiteralOrBuilder {
      // Use Literal.newBuilder() to construct.
      private Literal(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
        super(builder);
      }
      private Literal() {
        type_ = 0;
      }

      @java.lang.Override
      public final com.google.protobuf.UnknownFieldSet
      getUnknownFields() {
        return com.google.protobuf.UnknownFieldSet.getDefaultInstance();
      }
      private Literal(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        this();
        int mutable_bitField0_ = 0;
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              default: {
                if (!input.skipField(tag)) {
                  done = true;
                }
                break;
              }
              case 8: {
                int rawValue = input.readEnum();

                type_ = rawValue;
                break;
              }
            }
          }
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(this);
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(
              e).setUnfinishedMessage(this);
        } finally {
          makeExtensionsImmutable();
        }
      }
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return fast.Fast.internal_static_fast_Element_Literal_descriptor;
      }

      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return fast.Fast.internal_static_fast_Element_Literal_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                fast.Fast.Element.Literal.class, fast.Fast.Element.Literal.Builder.class);
      }

      /**
       * Protobuf enum {@code fast.Element.Literal.LiteralType}
       */
      public enum LiteralType
          implements com.google.protobuf.ProtocolMessageEnum {
        /**
         * <code>number_type = 0;</code>
         */
        number_type(0),
        /**
         * <code>char_type = 1;</code>
         */
        char_type(1),
        /**
         * <code>string_type = 2;</code>
         */
        string_type(2),
        /**
         * <code>boolean_type = 3;</code>
         */
        boolean_type(3),
        /**
         * <code>null_type = 4;</code>
         */
        null_type(4),
        UNRECOGNIZED(-1),
        ;

        /**
         * <code>number_type = 0;</code>
         */
        public static final int number_type_VALUE = 0;
        /**
         * <code>char_type = 1;</code>
         */
        public static final int char_type_VALUE = 1;
        /**
         * <code>string_type = 2;</code>
         */
        public static final int string_type_VALUE = 2;
        /**
         * <code>boolean_type = 3;</code>
         */
        public static final int boolean_type_VALUE = 3;
        /**
         * <code>null_type = 4;</code>
         */
        public static final int null_type_VALUE = 4;


        public final int getNumber() {
          if (this == UNRECOGNIZED) {
            throw new java.lang.IllegalArgumentException(
                "Can't get the number of an unknown enum value.");
          }
          return value;
        }

        /**
         * @deprecated Use {@link #forNumber(int)} instead.
         */
        @java.lang.Deprecated
        public static LiteralType valueOf(int value) {
          return forNumber(value);
        }

        public static LiteralType forNumber(int value) {
          switch (value) {
            case 0: return number_type;
            case 1: return char_type;
            case 2: return string_type;
            case 3: return boolean_type;
            case 4: return null_type;
            default: return null;
          }
        }

        public static com.google.protobuf.Internal.EnumLiteMap<LiteralType>
            internalGetValueMap() {
          return internalValueMap;
        }
        private static final com.google.protobuf.Internal.EnumLiteMap<
            LiteralType> internalValueMap =
              new com.google.protobuf.Internal.EnumLiteMap<LiteralType>() {
                public LiteralType findValueByNumber(int number) {
                  return LiteralType.forNumber(number);
                }
              };

        public final com.google.protobuf.Descriptors.EnumValueDescriptor
            getValueDescriptor() {
          return getDescriptor().getValues().get(ordinal());
        }
        public final com.google.protobuf.Descriptors.EnumDescriptor
            getDescriptorForType() {
          return getDescriptor();
        }
        public static final com.google.protobuf.Descriptors.EnumDescriptor
            getDescriptor() {
          return fast.Fast.Element.Literal.getDescriptor().getEnumTypes().get(0);
        }

        private static final LiteralType[] VALUES = values();

        public static LiteralType valueOf(
            com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
          if (desc.getType() != getDescriptor()) {
            throw new java.lang.IllegalArgumentException(
              "EnumValueDescriptor is not for this type.");
          }
          if (desc.getIndex() == -1) {
            return UNRECOGNIZED;
          }
          return VALUES[desc.getIndex()];
        }

        private final int value;

        private LiteralType(int value) {
          this.value = value;
        }

        // @@protoc_insertion_point(enum_scope:fast.Element.Literal.LiteralType)
      }

      public static final int TYPE_FIELD_NUMBER = 1;
      private int type_;
      /**
       * <code>.fast.Element.Literal.LiteralType type = 1;</code>
       */
      public int getTypeValue() {
        return type_;
      }
      /**
       * <code>.fast.Element.Literal.LiteralType type = 1;</code>
       */
      public fast.Fast.Element.Literal.LiteralType getType() {
        fast.Fast.Element.Literal.LiteralType result = fast.Fast.Element.Literal.LiteralType.valueOf(type_);
        return result == null ? fast.Fast.Element.Literal.LiteralType.UNRECOGNIZED : result;
      }

      private byte memoizedIsInitialized = -1;
      public final boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized == 1) return true;
        if (isInitialized == 0) return false;

        memoizedIsInitialized = 1;
        return true;
      }

      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        if (type_ != fast.Fast.Element.Literal.LiteralType.number_type.getNumber()) {
          output.writeEnum(1, type_);
        }
      }

      public int getSerializedSize() {
        int size = memoizedSize;
        if (size != -1) return size;

        size = 0;
        if (type_ != fast.Fast.Element.Literal.LiteralType.number_type.getNumber()) {
          size += com.google.protobuf.CodedOutputStream
            .computeEnumSize(1, type_);
        }
        memoizedSize = size;
        return size;
      }

      private static final long serialVersionUID = 0L;
      @java.lang.Override
      public boolean equals(final java.lang.Object obj) {
        if (obj == this) {
         return true;
        }
        if (!(obj instanceof fast.Fast.Element.Literal)) {
          return super.equals(obj);
        }
        fast.Fast.Element.Literal other = (fast.Fast.Element.Literal) obj;

        boolean result = true;
        result = result && type_ == other.type_;
        return result;
      }

      @java.lang.Override
      public int hashCode() {
        if (memoizedHashCode != 0) {
          return memoizedHashCode;
        }
        int hash = 41;
        hash = (19 * hash) + getDescriptor().hashCode();
        hash = (37 * hash) + TYPE_FIELD_NUMBER;
        hash = (53 * hash) + type_;
        hash = (29 * hash) + unknownFields.hashCode();
        memoizedHashCode = hash;
        return hash;
      }

      public static fast.Fast.Element.Literal parseFrom(
          java.nio.ByteBuffer data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static fast.Fast.Element.Literal parseFrom(
          java.nio.ByteBuffer data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static fast.Fast.Element.Literal parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static fast.Fast.Element.Literal parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static fast.Fast.Element.Literal parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static fast.Fast.Element.Literal parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static fast.Fast.Element.Literal parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input);
      }
      public static fast.Fast.Element.Literal parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input, extensionRegistry);
      }
      public static fast.Fast.Element.Literal parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseDelimitedWithIOException(PARSER, input);
      }
      public static fast.Fast.Element.Literal parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
      }
      public static fast.Fast.Element.Literal parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input);
      }
      public static fast.Fast.Element.Literal parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input, extensionRegistry);
      }

      public Builder newBuilderForType() { return newBuilder(); }
      public static Builder newBuilder() {
        return DEFAULT_INSTANCE.toBuilder();
      }
      public static Builder newBuilder(fast.Fast.Element.Literal prototype) {
        return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
      }
      public Builder toBuilder() {
        return this == DEFAULT_INSTANCE
            ? new Builder() : new Builder().mergeFrom(this);
      }

      @java.lang.Override
      protected Builder newBuilderForType(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        Builder builder = new Builder(parent);
        return builder;
      }
      /**
       * Protobuf type {@code fast.Element.Literal}
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
          // @@protoc_insertion_point(builder_implements:fast.Element.Literal)
          fast.Fast.Element.LiteralOrBuilder {
        public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
          return fast.Fast.internal_static_fast_Element_Literal_descriptor;
        }

        protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
            internalGetFieldAccessorTable() {
          return fast.Fast.internal_static_fast_Element_Literal_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                  fast.Fast.Element.Literal.class, fast.Fast.Element.Literal.Builder.class);
        }

        // Construct using fast.Fast.Element.Literal.newBuilder()
        private Builder() {
          maybeForceBuilderInitialization();
        }

        private Builder(
            com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
          super(parent);
          maybeForceBuilderInitialization();
        }
        private void maybeForceBuilderInitialization() {
          if (com.google.protobuf.GeneratedMessageV3
                  .alwaysUseFieldBuilders) {
          }
        }
        public Builder clear() {
          super.clear();
          type_ = 0;

          return this;
        }

        public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
          return fast.Fast.internal_static_fast_Element_Literal_descriptor;
        }

        public fast.Fast.Element.Literal getDefaultInstanceForType() {
          return fast.Fast.Element.Literal.getDefaultInstance();
        }

        public fast.Fast.Element.Literal build() {
          fast.Fast.Element.Literal result = buildPartial();
          if (!result.isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return result;
        }

        public fast.Fast.Element.Literal buildPartial() {
          fast.Fast.Element.Literal result = new fast.Fast.Element.Literal(this);
          result.type_ = type_;
          onBuilt();
          return result;
        }

        public Builder clone() {
          return (Builder) super.clone();
        }
        public Builder setField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            Object value) {
          return (Builder) super.setField(field, value);
        }
        public Builder clearField(
            com.google.protobuf.Descriptors.FieldDescriptor field) {
          return (Builder) super.clearField(field);
        }
        public Builder clearOneof(
            com.google.protobuf.Descriptors.OneofDescriptor oneof) {
          return (Builder) super.clearOneof(oneof);
        }
        public Builder setRepeatedField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            int index, Object value) {
          return (Builder) super.setRepeatedField(field, index, value);
        }
        public Builder addRepeatedField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            Object value) {
          return (Builder) super.addRepeatedField(field, value);
        }
        public Builder mergeFrom(com.google.protobuf.Message other) {
          if (other instanceof fast.Fast.Element.Literal) {
            return mergeFrom((fast.Fast.Element.Literal)other);
          } else {
            super.mergeFrom(other);
            return this;
          }
        }

        public Builder mergeFrom(fast.Fast.Element.Literal other) {
          if (other == fast.Fast.Element.Literal.getDefaultInstance()) return this;
          if (other.type_ != 0) {
            setTypeValue(other.getTypeValue());
          }
          onChanged();
          return this;
        }

        public final boolean isInitialized() {
          return true;
        }

        public Builder mergeFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          fast.Fast.Element.Literal parsedMessage = null;
          try {
            parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            parsedMessage = (fast.Fast.Element.Literal) e.getUnfinishedMessage();
            throw e.unwrapIOException();
          } finally {
            if (parsedMessage != null) {
              mergeFrom(parsedMessage);
            }
          }
          return this;
        }

        private int type_ = 0;
        /**
         * <code>.fast.Element.Literal.LiteralType type = 1;</code>
         */
        public int getTypeValue() {
          return type_;
        }
        /**
         * <code>.fast.Element.Literal.LiteralType type = 1;</code>
         */
        public Builder setTypeValue(int value) {
          type_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>.fast.Element.Literal.LiteralType type = 1;</code>
         */
        public fast.Fast.Element.Literal.LiteralType getType() {
          fast.Fast.Element.Literal.LiteralType result = fast.Fast.Element.Literal.LiteralType.valueOf(type_);
          return result == null ? fast.Fast.Element.Literal.LiteralType.UNRECOGNIZED : result;
        }
        /**
         * <code>.fast.Element.Literal.LiteralType type = 1;</code>
         */
        public Builder setType(fast.Fast.Element.Literal.LiteralType value) {
          if (value == null) {
            throw new NullPointerException();
          }
          
          type_ = value.getNumber();
          onChanged();
          return this;
        }
        /**
         * <code>.fast.Element.Literal.LiteralType type = 1;</code>
         */
        public Builder clearType() {
          
          type_ = 0;
          onChanged();
          return this;
        }
        public final Builder setUnknownFields(
            final com.google.protobuf.UnknownFieldSet unknownFields) {
          return this;
        }

        public final Builder mergeUnknownFields(
            final com.google.protobuf.UnknownFieldSet unknownFields) {
          return this;
        }


        // @@protoc_insertion_point(builder_scope:fast.Element.Literal)
      }

      // @@protoc_insertion_point(class_scope:fast.Element.Literal)
      private static final fast.Fast.Element.Literal DEFAULT_INSTANCE;
      static {
        DEFAULT_INSTANCE = new fast.Fast.Element.Literal();
      }

      public static fast.Fast.Element.Literal getDefaultInstance() {
        return DEFAULT_INSTANCE;
      }

      private static final com.google.protobuf.Parser<Literal>
          PARSER = new com.google.protobuf.AbstractParser<Literal>() {
        public Literal parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
            return new Literal(input, extensionRegistry);
        }
      };

      public static com.google.protobuf.Parser<Literal> parser() {
        return PARSER;
      }

      @java.lang.Override
      public com.google.protobuf.Parser<Literal> getParserForType() {
        return PARSER;
      }

      public fast.Fast.Element.Literal getDefaultInstanceForType() {
        return DEFAULT_INSTANCE;
      }

    }

    private int bitField0_;
    private int extraCase_ = 0;
    private java.lang.Object extra_;
    public enum ExtraCase
        implements com.google.protobuf.Internal.EnumLite {
      UNIT(5),
      LITERAL(6),
      EXTRA_NOT_SET(0);
      private final int value;
      private ExtraCase(int value) {
        this.value = value;
      }
      /**
       * @deprecated Use {@link #forNumber(int)} instead.
       */
      @java.lang.Deprecated
      public static ExtraCase valueOf(int value) {
        return forNumber(value);
      }

      public static ExtraCase forNumber(int value) {
        switch (value) {
          case 5: return UNIT;
          case 6: return LITERAL;
          case 0: return EXTRA_NOT_SET;
          default: return null;
        }
      }
      public int getNumber() {
        return this.value;
      }
    };

    public ExtraCase
    getExtraCase() {
      return ExtraCase.forNumber(
          extraCase_);
    }

    public static final int KIND_FIELD_NUMBER = 1;
    private int kind_;
    /**
     * <code>.fast.Element.Kind kind = 1;</code>
     */
    public int getKindValue() {
      return kind_;
    }
    /**
     * <code>.fast.Element.Kind kind = 1;</code>
     */
    public fast.Fast.Element.Kind getKind() {
      fast.Fast.Element.Kind result = fast.Fast.Element.Kind.valueOf(kind_);
      return result == null ? fast.Fast.Element.Kind.UNRECOGNIZED : result;
    }

    public static final int TEXT_FIELD_NUMBER = 2;
    private volatile java.lang.Object text_;
    /**
     * <code>string text = 2;</code>
     */
    public java.lang.String getText() {
      java.lang.Object ref = text_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        text_ = s;
        return s;
      }
    }
    /**
     * <code>string text = 2;</code>
     */
    public com.google.protobuf.ByteString
        getTextBytes() {
      java.lang.Object ref = text_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        text_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int TAIL_FIELD_NUMBER = 3;
    private volatile java.lang.Object tail_;
    /**
     * <code>string tail = 3;</code>
     */
    public java.lang.String getTail() {
      java.lang.Object ref = tail_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        tail_ = s;
        return s;
      }
    }
    /**
     * <code>string tail = 3;</code>
     */
    public com.google.protobuf.ByteString
        getTailBytes() {
      java.lang.Object ref = tail_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        tail_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int CHILD_FIELD_NUMBER = 4;
    private java.util.List<fast.Fast.Element> child_;
    /**
     * <code>repeated .fast.Element child = 4;</code>
     */
    public java.util.List<fast.Fast.Element> getChildList() {
      return child_;
    }
    /**
     * <code>repeated .fast.Element child = 4;</code>
     */
    public java.util.List<? extends fast.Fast.ElementOrBuilder> 
        getChildOrBuilderList() {
      return child_;
    }
    /**
     * <code>repeated .fast.Element child = 4;</code>
     */
    public int getChildCount() {
      return child_.size();
    }
    /**
     * <code>repeated .fast.Element child = 4;</code>
     */
    public fast.Fast.Element getChild(int index) {
      return child_.get(index);
    }
    /**
     * <code>repeated .fast.Element child = 4;</code>
     */
    public fast.Fast.ElementOrBuilder getChildOrBuilder(
        int index) {
      return child_.get(index);
    }

    public static final int UNIT_FIELD_NUMBER = 5;
    /**
     * <code>.fast.Element.Unit unit = 5;</code>
     */
    public fast.Fast.Element.Unit getUnit() {
      if (extraCase_ == 5) {
         return (fast.Fast.Element.Unit) extra_;
      }
      return fast.Fast.Element.Unit.getDefaultInstance();
    }
    /**
     * <code>.fast.Element.Unit unit = 5;</code>
     */
    public fast.Fast.Element.UnitOrBuilder getUnitOrBuilder() {
      if (extraCase_ == 5) {
         return (fast.Fast.Element.Unit) extra_;
      }
      return fast.Fast.Element.Unit.getDefaultInstance();
    }

    public static final int LITERAL_FIELD_NUMBER = 6;
    /**
     * <code>.fast.Element.Literal literal = 6;</code>
     */
    public fast.Fast.Element.Literal getLiteral() {
      if (extraCase_ == 6) {
         return (fast.Fast.Element.Literal) extra_;
      }
      return fast.Fast.Element.Literal.getDefaultInstance();
    }
    /**
     * <code>.fast.Element.Literal literal = 6;</code>
     */
    public fast.Fast.Element.LiteralOrBuilder getLiteralOrBuilder() {
      if (extraCase_ == 6) {
         return (fast.Fast.Element.Literal) extra_;
      }
      return fast.Fast.Element.Literal.getDefaultInstance();
    }

    public static final int LINE_FIELD_NUMBER = 7;
    private int line_;
    /**
     * <code>int32 line = 7;</code>
     */
    public int getLine() {
      return line_;
    }

    public static final int COLUMN_FIELD_NUMBER = 8;
    private int column_;
    /**
     * <code>int32 column = 8;</code>
     */
    public int getColumn() {
      return column_;
    }

    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (kind_ != fast.Fast.Element.Kind.UNIT_KIND.getNumber()) {
        output.writeEnum(1, kind_);
      }
      if (!getTextBytes().isEmpty()) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 2, text_);
      }
      if (!getTailBytes().isEmpty()) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 3, tail_);
      }
      for (int i = 0; i < child_.size(); i++) {
        output.writeMessage(4, child_.get(i));
      }
      if (extraCase_ == 5) {
        output.writeMessage(5, (fast.Fast.Element.Unit) extra_);
      }
      if (extraCase_ == 6) {
        output.writeMessage(6, (fast.Fast.Element.Literal) extra_);
      }
      if (line_ != 0) {
        output.writeInt32(7, line_);
      }
      if (column_ != 0) {
        output.writeInt32(8, column_);
      }
    }

    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (kind_ != fast.Fast.Element.Kind.UNIT_KIND.getNumber()) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(1, kind_);
      }
      if (!getTextBytes().isEmpty()) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(2, text_);
      }
      if (!getTailBytes().isEmpty()) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(3, tail_);
      }
      for (int i = 0; i < child_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(4, child_.get(i));
      }
      if (extraCase_ == 5) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(5, (fast.Fast.Element.Unit) extra_);
      }
      if (extraCase_ == 6) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(6, (fast.Fast.Element.Literal) extra_);
      }
      if (line_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(7, line_);
      }
      if (column_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(8, column_);
      }
      memoizedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof fast.Fast.Element)) {
        return super.equals(obj);
      }
      fast.Fast.Element other = (fast.Fast.Element) obj;

      boolean result = true;
      result = result && kind_ == other.kind_;
      result = result && getText()
          .equals(other.getText());
      result = result && getTail()
          .equals(other.getTail());
      result = result && getChildList()
          .equals(other.getChildList());
      result = result && (getLine()
          == other.getLine());
      result = result && (getColumn()
          == other.getColumn());
      result = result && getExtraCase().equals(
          other.getExtraCase());
      if (!result) return false;
      switch (extraCase_) {
        case 5:
          result = result && getUnit()
              .equals(other.getUnit());
          break;
        case 6:
          result = result && getLiteral()
              .equals(other.getLiteral());
          break;
        case 0:
        default:
      }
      return result;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + KIND_FIELD_NUMBER;
      hash = (53 * hash) + kind_;
      hash = (37 * hash) + TEXT_FIELD_NUMBER;
      hash = (53 * hash) + getText().hashCode();
      hash = (37 * hash) + TAIL_FIELD_NUMBER;
      hash = (53 * hash) + getTail().hashCode();
      if (getChildCount() > 0) {
        hash = (37 * hash) + CHILD_FIELD_NUMBER;
        hash = (53 * hash) + getChildList().hashCode();
      }
      hash = (37 * hash) + LINE_FIELD_NUMBER;
      hash = (53 * hash) + getLine();
      hash = (37 * hash) + COLUMN_FIELD_NUMBER;
      hash = (53 * hash) + getColumn();
      switch (extraCase_) {
        case 5:
          hash = (37 * hash) + UNIT_FIELD_NUMBER;
          hash = (53 * hash) + getUnit().hashCode();
          break;
        case 6:
          hash = (37 * hash) + LITERAL_FIELD_NUMBER;
          hash = (53 * hash) + getLiteral().hashCode();
          break;
        case 0:
        default:
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static fast.Fast.Element parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static fast.Fast.Element parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static fast.Fast.Element parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static fast.Fast.Element parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static fast.Fast.Element parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static fast.Fast.Element parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static fast.Fast.Element parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static fast.Fast.Element parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static fast.Fast.Element parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static fast.Fast.Element parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static fast.Fast.Element parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static fast.Fast.Element parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(fast.Fast.Element prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code fast.Element}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:fast.Element)
        fast.Fast.ElementOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return fast.Fast.internal_static_fast_Element_descriptor;
      }

      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return fast.Fast.internal_static_fast_Element_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                fast.Fast.Element.class, fast.Fast.Element.Builder.class);
      }

      // Construct using fast.Fast.Element.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
          getChildFieldBuilder();
        }
      }
      public Builder clear() {
        super.clear();
        kind_ = 0;

        text_ = "";

        tail_ = "";

        if (childBuilder_ == null) {
          child_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000008);
        } else {
          childBuilder_.clear();
        }
        line_ = 0;

        column_ = 0;

        extraCase_ = 0;
        extra_ = null;
        return this;
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return fast.Fast.internal_static_fast_Element_descriptor;
      }

      public fast.Fast.Element getDefaultInstanceForType() {
        return fast.Fast.Element.getDefaultInstance();
      }

      public fast.Fast.Element build() {
        fast.Fast.Element result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public fast.Fast.Element buildPartial() {
        fast.Fast.Element result = new fast.Fast.Element(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        result.kind_ = kind_;
        result.text_ = text_;
        result.tail_ = tail_;
        if (childBuilder_ == null) {
          if (((bitField0_ & 0x00000008) == 0x00000008)) {
            child_ = java.util.Collections.unmodifiableList(child_);
            bitField0_ = (bitField0_ & ~0x00000008);
          }
          result.child_ = child_;
        } else {
          result.child_ = childBuilder_.build();
        }
        if (extraCase_ == 5) {
          if (unitBuilder_ == null) {
            result.extra_ = extra_;
          } else {
            result.extra_ = unitBuilder_.build();
          }
        }
        if (extraCase_ == 6) {
          if (literalBuilder_ == null) {
            result.extra_ = extra_;
          } else {
            result.extra_ = literalBuilder_.build();
          }
        }
        result.line_ = line_;
        result.column_ = column_;
        result.bitField0_ = to_bitField0_;
        result.extraCase_ = extraCase_;
        onBuilt();
        return result;
      }

      public Builder clone() {
        return (Builder) super.clone();
      }
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return (Builder) super.setField(field, value);
      }
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return (Builder) super.clearField(field);
      }
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return (Builder) super.clearOneof(oneof);
      }
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, Object value) {
        return (Builder) super.setRepeatedField(field, index, value);
      }
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return (Builder) super.addRepeatedField(field, value);
      }
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof fast.Fast.Element) {
          return mergeFrom((fast.Fast.Element)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(fast.Fast.Element other) {
        if (other == fast.Fast.Element.getDefaultInstance()) return this;
        if (other.kind_ != 0) {
          setKindValue(other.getKindValue());
        }
        if (!other.getText().isEmpty()) {
          text_ = other.text_;
          onChanged();
        }
        if (!other.getTail().isEmpty()) {
          tail_ = other.tail_;
          onChanged();
        }
        if (childBuilder_ == null) {
          if (!other.child_.isEmpty()) {
            if (child_.isEmpty()) {
              child_ = other.child_;
              bitField0_ = (bitField0_ & ~0x00000008);
            } else {
              ensureChildIsMutable();
              child_.addAll(other.child_);
            }
            onChanged();
          }
        } else {
          if (!other.child_.isEmpty()) {
            if (childBuilder_.isEmpty()) {
              childBuilder_.dispose();
              childBuilder_ = null;
              child_ = other.child_;
              bitField0_ = (bitField0_ & ~0x00000008);
              childBuilder_ = 
                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                   getChildFieldBuilder() : null;
            } else {
              childBuilder_.addAllMessages(other.child_);
            }
          }
        }
        if (other.getLine() != 0) {
          setLine(other.getLine());
        }
        if (other.getColumn() != 0) {
          setColumn(other.getColumn());
        }
        switch (other.getExtraCase()) {
          case UNIT: {
            mergeUnit(other.getUnit());
            break;
          }
          case LITERAL: {
            mergeLiteral(other.getLiteral());
            break;
          }
          case EXTRA_NOT_SET: {
            break;
          }
        }
        onChanged();
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        fast.Fast.Element parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (fast.Fast.Element) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int extraCase_ = 0;
      private java.lang.Object extra_;
      public ExtraCase
          getExtraCase() {
        return ExtraCase.forNumber(
            extraCase_);
      }

      public Builder clearExtra() {
        extraCase_ = 0;
        extra_ = null;
        onChanged();
        return this;
      }

      private int bitField0_;

      private int kind_ = 0;
      /**
       * <code>.fast.Element.Kind kind = 1;</code>
       */
      public int getKindValue() {
        return kind_;
      }
      /**
       * <code>.fast.Element.Kind kind = 1;</code>
       */
      public Builder setKindValue(int value) {
        kind_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>.fast.Element.Kind kind = 1;</code>
       */
      public fast.Fast.Element.Kind getKind() {
        fast.Fast.Element.Kind result = fast.Fast.Element.Kind.valueOf(kind_);
        return result == null ? fast.Fast.Element.Kind.UNRECOGNIZED : result;
      }
      /**
       * <code>.fast.Element.Kind kind = 1;</code>
       */
      public Builder setKind(fast.Fast.Element.Kind value) {
        if (value == null) {
          throw new NullPointerException();
        }
        
        kind_ = value.getNumber();
        onChanged();
        return this;
      }
      /**
       * <code>.fast.Element.Kind kind = 1;</code>
       */
      public Builder clearKind() {
        
        kind_ = 0;
        onChanged();
        return this;
      }

      private java.lang.Object text_ = "";
      /**
       * <code>string text = 2;</code>
       */
      public java.lang.String getText() {
        java.lang.Object ref = text_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          text_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>string text = 2;</code>
       */
      public com.google.protobuf.ByteString
          getTextBytes() {
        java.lang.Object ref = text_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          text_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>string text = 2;</code>
       */
      public Builder setText(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        text_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>string text = 2;</code>
       */
      public Builder clearText() {
        
        text_ = getDefaultInstance().getText();
        onChanged();
        return this;
      }
      /**
       * <code>string text = 2;</code>
       */
      public Builder setTextBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        text_ = value;
        onChanged();
        return this;
      }

      private java.lang.Object tail_ = "";
      /**
       * <code>string tail = 3;</code>
       */
      public java.lang.String getTail() {
        java.lang.Object ref = tail_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          tail_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>string tail = 3;</code>
       */
      public com.google.protobuf.ByteString
          getTailBytes() {
        java.lang.Object ref = tail_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          tail_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>string tail = 3;</code>
       */
      public Builder setTail(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        tail_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>string tail = 3;</code>
       */
      public Builder clearTail() {
        
        tail_ = getDefaultInstance().getTail();
        onChanged();
        return this;
      }
      /**
       * <code>string tail = 3;</code>
       */
      public Builder setTailBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        tail_ = value;
        onChanged();
        return this;
      }

      private java.util.List<fast.Fast.Element> child_ =
        java.util.Collections.emptyList();
      private void ensureChildIsMutable() {
        if (!((bitField0_ & 0x00000008) == 0x00000008)) {
          child_ = new java.util.ArrayList<fast.Fast.Element>(child_);
          bitField0_ |= 0x00000008;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilderV3<
          fast.Fast.Element, fast.Fast.Element.Builder, fast.Fast.ElementOrBuilder> childBuilder_;

      /**
       * <code>repeated .fast.Element child = 4;</code>
       */
      public java.util.List<fast.Fast.Element> getChildList() {
        if (childBuilder_ == null) {
          return java.util.Collections.unmodifiableList(child_);
        } else {
          return childBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .fast.Element child = 4;</code>
       */
      public int getChildCount() {
        if (childBuilder_ == null) {
          return child_.size();
        } else {
          return childBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .fast.Element child = 4;</code>
       */
      public fast.Fast.Element getChild(int index) {
        if (childBuilder_ == null) {
          return child_.get(index);
        } else {
          return childBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .fast.Element child = 4;</code>
       */
      public Builder setChild(
          int index, fast.Fast.Element value) {
        if (childBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureChildIsMutable();
          child_.set(index, value);
          onChanged();
        } else {
          childBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .fast.Element child = 4;</code>
       */
      public Builder setChild(
          int index, fast.Fast.Element.Builder builderForValue) {
        if (childBuilder_ == null) {
          ensureChildIsMutable();
          child_.set(index, builderForValue.build());
          onChanged();
        } else {
          childBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .fast.Element child = 4;</code>
       */
      public Builder addChild(fast.Fast.Element value) {
        if (childBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureChildIsMutable();
          child_.add(value);
          onChanged();
        } else {
          childBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .fast.Element child = 4;</code>
       */
      public Builder addChild(
          int index, fast.Fast.Element value) {
        if (childBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureChildIsMutable();
          child_.add(index, value);
          onChanged();
        } else {
          childBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .fast.Element child = 4;</code>
       */
      public Builder addChild(
          fast.Fast.Element.Builder builderForValue) {
        if (childBuilder_ == null) {
          ensureChildIsMutable();
          child_.add(builderForValue.build());
          onChanged();
        } else {
          childBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .fast.Element child = 4;</code>
       */
      public Builder addChild(
          int index, fast.Fast.Element.Builder builderForValue) {
        if (childBuilder_ == null) {
          ensureChildIsMutable();
          child_.add(index, builderForValue.build());
          onChanged();
        } else {
          childBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .fast.Element child = 4;</code>
       */
      public Builder addAllChild(
          java.lang.Iterable<? extends fast.Fast.Element> values) {
        if (childBuilder_ == null) {
          ensureChildIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, child_);
          onChanged();
        } else {
          childBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .fast.Element child = 4;</code>
       */
      public Builder clearChild() {
        if (childBuilder_ == null) {
          child_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000008);
          onChanged();
        } else {
          childBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .fast.Element child = 4;</code>
       */
      public Builder removeChild(int index) {
        if (childBuilder_ == null) {
          ensureChildIsMutable();
          child_.remove(index);
          onChanged();
        } else {
          childBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .fast.Element child = 4;</code>
       */
      public fast.Fast.Element.Builder getChildBuilder(
          int index) {
        return getChildFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .fast.Element child = 4;</code>
       */
      public fast.Fast.ElementOrBuilder getChildOrBuilder(
          int index) {
        if (childBuilder_ == null) {
          return child_.get(index);  } else {
          return childBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .fast.Element child = 4;</code>
       */
      public java.util.List<? extends fast.Fast.ElementOrBuilder> 
           getChildOrBuilderList() {
        if (childBuilder_ != null) {
          return childBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(child_);
        }
      }
      /**
       * <code>repeated .fast.Element child = 4;</code>
       */
      public fast.Fast.Element.Builder addChildBuilder() {
        return getChildFieldBuilder().addBuilder(
            fast.Fast.Element.getDefaultInstance());
      }
      /**
       * <code>repeated .fast.Element child = 4;</code>
       */
      public fast.Fast.Element.Builder addChildBuilder(
          int index) {
        return getChildFieldBuilder().addBuilder(
            index, fast.Fast.Element.getDefaultInstance());
      }
      /**
       * <code>repeated .fast.Element child = 4;</code>
       */
      public java.util.List<fast.Fast.Element.Builder> 
           getChildBuilderList() {
        return getChildFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilderV3<
          fast.Fast.Element, fast.Fast.Element.Builder, fast.Fast.ElementOrBuilder> 
          getChildFieldBuilder() {
        if (childBuilder_ == null) {
          childBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
              fast.Fast.Element, fast.Fast.Element.Builder, fast.Fast.ElementOrBuilder>(
                  child_,
                  ((bitField0_ & 0x00000008) == 0x00000008),
                  getParentForChildren(),
                  isClean());
          child_ = null;
        }
        return childBuilder_;
      }

      private com.google.protobuf.SingleFieldBuilderV3<
          fast.Fast.Element.Unit, fast.Fast.Element.Unit.Builder, fast.Fast.Element.UnitOrBuilder> unitBuilder_;
      /**
       * <code>.fast.Element.Unit unit = 5;</code>
       */
      public fast.Fast.Element.Unit getUnit() {
        if (unitBuilder_ == null) {
          if (extraCase_ == 5) {
            return (fast.Fast.Element.Unit) extra_;
          }
          return fast.Fast.Element.Unit.getDefaultInstance();
        } else {
          if (extraCase_ == 5) {
            return unitBuilder_.getMessage();
          }
          return fast.Fast.Element.Unit.getDefaultInstance();
        }
      }
      /**
       * <code>.fast.Element.Unit unit = 5;</code>
       */
      public Builder setUnit(fast.Fast.Element.Unit value) {
        if (unitBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          extra_ = value;
          onChanged();
        } else {
          unitBuilder_.setMessage(value);
        }
        extraCase_ = 5;
        return this;
      }
      /**
       * <code>.fast.Element.Unit unit = 5;</code>
       */
      public Builder setUnit(
          fast.Fast.Element.Unit.Builder builderForValue) {
        if (unitBuilder_ == null) {
          extra_ = builderForValue.build();
          onChanged();
        } else {
          unitBuilder_.setMessage(builderForValue.build());
        }
        extraCase_ = 5;
        return this;
      }
      /**
       * <code>.fast.Element.Unit unit = 5;</code>
       */
      public Builder mergeUnit(fast.Fast.Element.Unit value) {
        if (unitBuilder_ == null) {
          if (extraCase_ == 5 &&
              extra_ != fast.Fast.Element.Unit.getDefaultInstance()) {
            extra_ = fast.Fast.Element.Unit.newBuilder((fast.Fast.Element.Unit) extra_)
                .mergeFrom(value).buildPartial();
          } else {
            extra_ = value;
          }
          onChanged();
        } else {
          if (extraCase_ == 5) {
            unitBuilder_.mergeFrom(value);
          }
          unitBuilder_.setMessage(value);
        }
        extraCase_ = 5;
        return this;
      }
      /**
       * <code>.fast.Element.Unit unit = 5;</code>
       */
      public Builder clearUnit() {
        if (unitBuilder_ == null) {
          if (extraCase_ == 5) {
            extraCase_ = 0;
            extra_ = null;
            onChanged();
          }
        } else {
          if (extraCase_ == 5) {
            extraCase_ = 0;
            extra_ = null;
          }
          unitBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>.fast.Element.Unit unit = 5;</code>
       */
      public fast.Fast.Element.Unit.Builder getUnitBuilder() {
        return getUnitFieldBuilder().getBuilder();
      }
      /**
       * <code>.fast.Element.Unit unit = 5;</code>
       */
      public fast.Fast.Element.UnitOrBuilder getUnitOrBuilder() {
        if ((extraCase_ == 5) && (unitBuilder_ != null)) {
          return unitBuilder_.getMessageOrBuilder();
        } else {
          if (extraCase_ == 5) {
            return (fast.Fast.Element.Unit) extra_;
          }
          return fast.Fast.Element.Unit.getDefaultInstance();
        }
      }
      /**
       * <code>.fast.Element.Unit unit = 5;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          fast.Fast.Element.Unit, fast.Fast.Element.Unit.Builder, fast.Fast.Element.UnitOrBuilder> 
          getUnitFieldBuilder() {
        if (unitBuilder_ == null) {
          if (!(extraCase_ == 5)) {
            extra_ = fast.Fast.Element.Unit.getDefaultInstance();
          }
          unitBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              fast.Fast.Element.Unit, fast.Fast.Element.Unit.Builder, fast.Fast.Element.UnitOrBuilder>(
                  (fast.Fast.Element.Unit) extra_,
                  getParentForChildren(),
                  isClean());
          extra_ = null;
        }
        extraCase_ = 5;
        onChanged();;
        return unitBuilder_;
      }

      private com.google.protobuf.SingleFieldBuilderV3<
          fast.Fast.Element.Literal, fast.Fast.Element.Literal.Builder, fast.Fast.Element.LiteralOrBuilder> literalBuilder_;
      /**
       * <code>.fast.Element.Literal literal = 6;</code>
       */
      public fast.Fast.Element.Literal getLiteral() {
        if (literalBuilder_ == null) {
          if (extraCase_ == 6) {
            return (fast.Fast.Element.Literal) extra_;
          }
          return fast.Fast.Element.Literal.getDefaultInstance();
        } else {
          if (extraCase_ == 6) {
            return literalBuilder_.getMessage();
          }
          return fast.Fast.Element.Literal.getDefaultInstance();
        }
      }
      /**
       * <code>.fast.Element.Literal literal = 6;</code>
       */
      public Builder setLiteral(fast.Fast.Element.Literal value) {
        if (literalBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          extra_ = value;
          onChanged();
        } else {
          literalBuilder_.setMessage(value);
        }
        extraCase_ = 6;
        return this;
      }
      /**
       * <code>.fast.Element.Literal literal = 6;</code>
       */
      public Builder setLiteral(
          fast.Fast.Element.Literal.Builder builderForValue) {
        if (literalBuilder_ == null) {
          extra_ = builderForValue.build();
          onChanged();
        } else {
          literalBuilder_.setMessage(builderForValue.build());
        }
        extraCase_ = 6;
        return this;
      }
      /**
       * <code>.fast.Element.Literal literal = 6;</code>
       */
      public Builder mergeLiteral(fast.Fast.Element.Literal value) {
        if (literalBuilder_ == null) {
          if (extraCase_ == 6 &&
              extra_ != fast.Fast.Element.Literal.getDefaultInstance()) {
            extra_ = fast.Fast.Element.Literal.newBuilder((fast.Fast.Element.Literal) extra_)
                .mergeFrom(value).buildPartial();
          } else {
            extra_ = value;
          }
          onChanged();
        } else {
          if (extraCase_ == 6) {
            literalBuilder_.mergeFrom(value);
          }
          literalBuilder_.setMessage(value);
        }
        extraCase_ = 6;
        return this;
      }
      /**
       * <code>.fast.Element.Literal literal = 6;</code>
       */
      public Builder clearLiteral() {
        if (literalBuilder_ == null) {
          if (extraCase_ == 6) {
            extraCase_ = 0;
            extra_ = null;
            onChanged();
          }
        } else {
          if (extraCase_ == 6) {
            extraCase_ = 0;
            extra_ = null;
          }
          literalBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>.fast.Element.Literal literal = 6;</code>
       */
      public fast.Fast.Element.Literal.Builder getLiteralBuilder() {
        return getLiteralFieldBuilder().getBuilder();
      }
      /**
       * <code>.fast.Element.Literal literal = 6;</code>
       */
      public fast.Fast.Element.LiteralOrBuilder getLiteralOrBuilder() {
        if ((extraCase_ == 6) && (literalBuilder_ != null)) {
          return literalBuilder_.getMessageOrBuilder();
        } else {
          if (extraCase_ == 6) {
            return (fast.Fast.Element.Literal) extra_;
          }
          return fast.Fast.Element.Literal.getDefaultInstance();
        }
      }
      /**
       * <code>.fast.Element.Literal literal = 6;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          fast.Fast.Element.Literal, fast.Fast.Element.Literal.Builder, fast.Fast.Element.LiteralOrBuilder> 
          getLiteralFieldBuilder() {
        if (literalBuilder_ == null) {
          if (!(extraCase_ == 6)) {
            extra_ = fast.Fast.Element.Literal.getDefaultInstance();
          }
          literalBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              fast.Fast.Element.Literal, fast.Fast.Element.Literal.Builder, fast.Fast.Element.LiteralOrBuilder>(
                  (fast.Fast.Element.Literal) extra_,
                  getParentForChildren(),
                  isClean());
          extra_ = null;
        }
        extraCase_ = 6;
        onChanged();;
        return literalBuilder_;
      }

      private int line_ ;
      /**
       * <code>int32 line = 7;</code>
       */
      public int getLine() {
        return line_;
      }
      /**
       * <code>int32 line = 7;</code>
       */
      public Builder setLine(int value) {
        
        line_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>int32 line = 7;</code>
       */
      public Builder clearLine() {
        
        line_ = 0;
        onChanged();
        return this;
      }

      private int column_ ;
      /**
       * <code>int32 column = 8;</code>
       */
      public int getColumn() {
        return column_;
      }
      /**
       * <code>int32 column = 8;</code>
       */
      public Builder setColumn(int value) {
        
        column_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>int32 column = 8;</code>
       */
      public Builder clearColumn() {
        
        column_ = 0;
        onChanged();
        return this;
      }
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return this;
      }

      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return this;
      }


      // @@protoc_insertion_point(builder_scope:fast.Element)
    }

    // @@protoc_insertion_point(class_scope:fast.Element)
    private static final fast.Fast.Element DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new fast.Fast.Element();
    }

    public static fast.Fast.Element getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<Element>
        PARSER = new com.google.protobuf.AbstractParser<Element>() {
      public Element parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
          return new Element(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<Element> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<Element> getParserForType() {
      return PARSER;
    }

    public fast.Fast.Element getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_fast_Element_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_fast_Element_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_fast_Element_Unit_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_fast_Element_Unit_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_fast_Element_Literal_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_fast_Element_Literal_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static  com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n\nfast.proto\022\004fast\"\3766\n\007Element\022 \n\004kind\030\001" +
      " \001(\0162\022.fast.Element.Kind\022\014\n\004text\030\002 \001(\t\022\014" +
      "\n\004tail\030\003 \001(\t\022\034\n\005child\030\004 \003(\0132\r.fast.Eleme" +
      "nt\022\"\n\004unit\030\005 \001(\0132\022.fast.Element.UnitH\000\022(" +
      "\n\007literal\030\006 \001(\0132\025.fast.Element.LiteralH\000" +
      "\022\014\n\004line\030\007 \001(\005\022\016\n\006column\030\010 \001(\005\032\321\001\n\004Unit\022" +
      "\020\n\010filename\030\001 \001(\t\022\020\n\010revision\030\002 \001(\t\0221\n\010l" +
      "anguage\030\003 \001(\0162\037.fast.Element.Unit.Langua" +
      "geType\022\014\n\004item\030\004 \001(\005\"d\n\014LanguageType\022\007\n\003" +
      "ALL\020\000\022\006\n\002OO\020\001\022\007\n\003CXX\020\002\022\005\n\001C\020\003\022\014\n\010C_FAMIL",
      "Y\020\004\022\010\n\004JAVA\020\005\022\n\n\006CSHARP\020\006\022\017\n\013OBJECTIVE_C" +
      "\020\007\032\233\001\n\007Literal\022/\n\004type\030\001 \001(\0162!.fast.Elem" +
      "ent.Literal.LiteralType\"_\n\013LiteralType\022\017" +
      "\n\013number_type\020\000\022\r\n\tchar_type\020\001\022\017\n\013string" +
      "_type\020\002\022\020\n\014boolean_type\020\003\022\r\n\tnull_type\020\004" +
      "\"\2572\n\004Kind\022\r\n\tUNIT_KIND\020\000\022\010\n\004DECL\020\001\022\r\n\tDE" +
      "CL_STMT\020\002\022\010\n\004INIT\020\003\022\010\n\004EXPR\020\004\022\r\n\tEXPR_ST" +
      "MT\020\005\022\013\n\007COMMENT\020\006\022\010\n\004CALL\020\007\022\013\n\007CONTROL\020\010" +
      "\022\010\n\004INCR\020\t\022\010\n\004NONE\020\n\022\014\n\010VARIABLE\020\013\022\014\n\010FU" +
      "NCTION\020\014\022\021\n\rFUNCTION_DECL\020\r\022\017\n\013CONSTRUCT",
      "OR\020\016\022\024\n\020CONSTRUCTOR_DECL\020\017\022\016\n\nDESTRUCTOR" +
      "\020\020\022\023\n\017DESTRUCTOR_DECL\020\021\022\t\n\005MACRO\020\022\022\020\n\014SI" +
      "NGLE_MACRO\020\023\022\020\n\014NULLOPERATOR\020\024\022\r\n\tENUM_D" +
      "EFN\020\025\022\r\n\tENUM_DECL\020\026\022\024\n\020GLOBAL_ATTRIBUTE" +
      "\020\027\022\025\n\021PROPERTY_ACCESSOR\020\030\022\032\n\026PROPERTY_AC" +
      "CESSOR_DECL\020\031\022\016\n\nEXPRESSION\020\032\022\016\n\nCLASS_D" +
      "EFN\020\033\022\016\n\nCLASS_DECL\020\034\022\016\n\nUNION_DEFN\020\035\022\016\n" +
      "\nUNION_DECL\020\036\022\017\n\013STRUCT_DEFN\020\037\022\017\n\013STRUCT" +
      "_DECL\020 \022\022\n\016INTERFACE_DEFN\020!\022\022\n\016INTERFACE" +
      "_DECL\020\"\022\021\n\rACCESS_REGION\020#\022\t\n\005USING\020$\022\025\n",
      "\021OPERATOR_FUNCTION\020%\022\032\n\026OPERATOR_FUNCTIO" +
      "N_DECL\020&\022\t\n\005EVENT\020\'\022\014\n\010PROPERTY\020(\022\023\n\017ANN" +
      "OTATION_DEFN\020)\022\023\n\017GLOBAL_TEMPLATE\020*\022\010\n\004U" +
      "NIT\020+\022\026\n\022TART_ELEMENT_TOKEN\020,\022\007\n\003NOP\020-\022\n" +
      "\n\006STRING\020.\022\010\n\004CHAR\020/\022\013\n\007LITERAL\0200\022\013\n\007BOO" +
      "LEAN\0201\022\010\n\004NULL\0202\022\013\n\007COMPLEX\0203\022\014\n\010OPERATO" +
      "R\0204\022\014\n\010MODIFIER\0205\022\010\n\004NAME\0206\022\t\n\005ONAME\0207\022\t" +
      "\n\005CNAME\0208\022\010\n\004TYPE\0209\022\014\n\010TYPEPREV\020:\022\r\n\tCON" +
      "DITION\020;\022\t\n\005BLOCK\020<\022\020\n\014PSEUDO_BLOCK\020=\022\t\n" +
      "\005INDEX\020>\022\010\n\004ENUM\020?\022\024\n\020ENUM_DECLARATION\020@",
      "\022\020\n\014IF_STATEMENT\020A\022\013\n\007TERNARY\020B\022\010\n\004THEN\020" +
      "C\022\010\n\004ELSE\020D\022\n\n\006ELSEIF\020E\022\023\n\017WHILE_STATEME" +
      "NT\020F\022\020\n\014DO_STATEMENT\020G\022\021\n\rFOR_STATEMENT\020" +
      "H\022\025\n\021FOREACH_STATEMENT\020I\022\017\n\013FOR_CONTROL\020" +
      "J\022\026\n\022FOR_INITIALIZATION\020K\022\021\n\rFOR_CONDITI" +
      "ON\020L\022\021\n\rFOR_INCREMENT\020M\022\024\n\020FOR_LIKE_CONT" +
      "ROL\020N\022\030\n\024EXPRESSION_STATEMENT\020O\022\021\n\rFUNCT" +
      "ION_CALL\020Q\022\031\n\025DECLARATION_STATEMENT\020R\022\017\n" +
      "\013DECLARATION\020S\022\036\n\032DECLARATION_INITIALIZA" +
      "TION\020T\022\025\n\021DECLARATION_RANGE\020U\022\t\n\005RANGE\020V",
      "\022\022\n\016GOTO_STATEMENT\020W\022\026\n\022CONTINUE_STATEME" +
      "NT\020X\022\023\n\017BREAK_STATEMENT\020Y\022\023\n\017LABEL_STATE" +
      "MENT\020Z\022\t\n\005LABEL\020[\022\n\n\006SWITCH\020\\\022\010\n\004CASE\020]\022" +
      "\013\n\007DEFAULT\020^\022\027\n\023FUNCTION_DEFINITION\020_\022\030\n" +
      "\024FUNCTION_DECLARATION\020`\022\n\n\006LAMBDA\020a\022\023\n\017F" +
      "UNCTION_LAMBDA\020b\022\026\n\022FUNCTION_SPECIFIER\020c" +
      "\022\024\n\020RETURN_STATEMENT\020d\022\022\n\016PARAMETER_LIST" +
      "\020e\022\r\n\tPARAMETER\020f\022\024\n\020KRPARAMETER_LIST\020g\022" +
      "\017\n\013KRPARAMETER\020h\022\021\n\rARGUMENT_LIST\020i\022\014\n\010A" +
      "RGUMENT\020j\022\031\n\025PSEUDO_PARAMETER_LIST\020k\022\032\n\026",
      "INDEXER_PARAMETER_LIST\020l\022\t\n\005CLASS\020m\022\025\n\021C" +
      "LASS_DECLARATION\020n\022\n\n\006STRUCT\020o\022\026\n\022STRUCT" +
      "_DECLARATION\020p\022\t\n\005UNION\020q\022\025\n\021UNION_DECLA" +
      "RATION\020r\022\023\n\017DERIVATION_LIST\020s\022\021\n\rPUBLIC_" +
      "ACCESS\020t\022\031\n\025PUBLIC_ACCESS_DEFAULT\020u\022\022\n\016P" +
      "RIVATE_ACCESS\020v\022\032\n\026PRIVATE_ACCESS_DEFAUL" +
      "T\020w\022\024\n\020PROTECTED_ACCESS\020x\022\034\n\030PROTECTED_A" +
      "CCESS_DEFAULT\020y\022\024\n\020MEMBER_INIT_LIST\020z\022\036\n" +
      "\032MEMBER_INITIALIZATION_LIST\020{\022\031\n\025MEMBER_" +
      "INITIALIZATION\020|\022\032\n\026CONSTRUCTOR_DEFINITI",
      "ON\020}\022\033\n\027CONSTRUCTOR_DECLARATION\020~\022\031\n\025DES" +
      "TRUCTOR_DEFINITION\020\177\022\033\n\026DESTRUCTOR_DECLA" +
      "RATION\020\200\001\022\013\n\006FRIEND\020\201\001\022\024\n\017CLASS_SPECIFIE" +
      "R\020\202\001\022\016\n\tTRY_BLOCK\020\203\001\022\020\n\013CATCH_BLOCK\020\204\001\022\022" +
      "\n\rFINALLY_BLOCK\020\205\001\022\024\n\017THROW_STATEMENT\020\206\001" +
      "\022\024\n\017THROW_SPECIFIER\020\207\001\022\031\n\024THROW_SPECIFIE" +
      "R_JAVA\020\210\001\022\r\n\010TEMPLATE\020\211\001\022\025\n\020GENERIC_ARGU" +
      "MENT\020\212\001\022\032\n\025GENERIC_ARGUMENT_LIST\020\213\001\022\027\n\022T" +
      "EMPLATE_PARAMETER\020\214\001\022\034\n\027TEMPLATE_PARAMET" +
      "ER_LIST\020\215\001\022\026\n\021GENERIC_PARAMETER\020\216\001\022\033\n\026GE",
      "NERIC_PARAMETER_LIST\020\217\001\022\014\n\007TYPEDEF\020\220\001\022\010\n" +
      "\003ASM\020\221\001\022\017\n\nMACRO_CALL\020\222\001\022\020\n\013SIZEOF_CALL\020" +
      "\223\001\022\013\n\006EXTERN\020\224\001\022\016\n\tNAMESPACE\020\225\001\022\024\n\017USING" +
      "_DIRECTIVE\020\226\001\022\016\n\tDIRECTIVE\020\227\001\022\013\n\006ATOMIC\020" +
      "\230\001\022\034\n\027STATIC_ASSERT_STATEMENT\020\231\001\022\026\n\021GENE" +
      "RIC_SELECTION\020\232\001\022\025\n\020GENERIC_SELECTOR\020\233\001\022" +
      "\035\n\030GENERIC_ASSOCIATION_LIST\020\234\001\022\030\n\023GENERI" +
      "C_ASSOCIATION\020\235\001\022\014\n\007ALIGNAS\020\236\001\022\r\n\010DECLTY" +
      "PE\020\237\001\022\014\n\007CAPTURE\020\240\001\022\023\n\016LAMBDA_CAPTURE\020\241\001" +
      "\022\r\n\010NOEXCEPT\020\242\001\022\r\n\010TYPENAME\020\243\001\022\014\n\007ALIGNO",
      "F\020\244\001\022\013\n\006TYPEID\020\245\001\022\020\n\013SIZEOF_PACK\020\246\001\022\017\n\nE" +
      "NUM_CLASS\020\247\001\022\033\n\026ENUM_CLASS_DECLARATION\020\250" +
      "\001\022\022\n\rREF_QUALIFIER\020\253\001\022\022\n\rSIGNAL_ACCESS\020\254" +
      "\001\022\026\n\021FOREVER_STATEMENT\020\255\001\022\023\n\016EMIT_STATEM" +
      "ENT\020\256\001\022\022\n\rCPP_DIRECTIVE\020\257\001\022\021\n\014CPP_FILENA" +
      "ME\020\260\001\022\t\n\004FILE\020\261\001\022\013\n\006NUMBER\020\262\001\022\017\n\nCPP_NUM" +
      "BER\020\263\001\022\020\n\013CPP_LITERAL\020\264\001\022\023\n\016CPP_MACRO_DE" +
      "FN\020\265\001\022\024\n\017CPP_MACRO_VALUE\020\266\001\022\n\n\005ERROR\020\267\001\022" +
      "\016\n\tCPP_ERROR\020\270\001\022\020\n\013CPP_WARNING\020\271\001\022\017\n\nCPP" +
      "_PRAGMA\020\272\001\022\020\n\013CPP_INCLUDE\020\273\001\022\017\n\nCPP_DEFI",
      "NE\020\274\001\022\016\n\tCPP_UNDEF\020\275\001\022\r\n\010CPP_LINE\020\276\001\022\013\n\006" +
      "CPP_IF\020\277\001\022\016\n\tCPP_IFDEF\020\300\001\022\017\n\nCPP_IFNDEF\020" +
      "\301\001\022\r\n\010CPP_THEN\020\302\001\022\r\n\010CPP_ELSE\020\303\001\022\r\n\010CPP_" +
      "ELIF\020\304\001\022\016\n\tCPP_EMPTY\020\305\001\022\017\n\nCPP_REGION\020\306\001" +
      "\022\022\n\rCPP_ENDREGION\020\307\001\022\017\n\nUSING_STMT\020\310\001\022\013\n" +
      "\006ESCAPE\020\311\001\022\n\n\005VALUE\020\312\001\022\017\n\nCPP_IMPORT\020\313\001\022" +
      "\016\n\tCPP_ENDIF\020\314\001\022\013\n\006MARKER\020\315\001\022\020\n\013ERROR_PA" +
      "RSE\020\316\001\022\017\n\nERROR_MODE\020\317\001\022\017\n\nIMPLEMENTS\020\320\001" +
      "\022\014\n\007EXTENDS\020\321\001\022\013\n\006IMPORT\020\322\001\022\014\n\007PACKAGE\020\323" +
      "\001\022\025\n\020ASSERT_STATEMENT\020\324\001\022\016\n\tINTERFACE\020\325\001",
      "\022\032\n\025INTERFACE_DECLARATION\020\326\001\022\033\n\026SYNCHRON" +
      "IZED_STATEMENT\020\327\001\022\017\n\nANNOTATION\020\330\001\022\021\n\014ST" +
      "ATIC_BLOCK\020\332\001\022\026\n\021CHECKED_STATEMENT\020\333\001\022\030\n" +
      "\023UNCHECKED_STATEMENT\020\334\001\022\016\n\tATTRIBUTE\020\335\001\022" +
      "\013\n\006TARGET\020\336\001\022\025\n\020UNSAFE_STATEMENT\020\337\001\022\023\n\016L" +
      "OCK_STATEMENT\020\340\001\022\024\n\017FIXED_STATEMENT\020\341\001\022\013" +
      "\n\006TYPEOF\020\342\001\022\024\n\017USING_STATEMENT\020\343\001\022\026\n\021FUN" +
      "CTION_DELEGATE\020\344\001\022\017\n\nCONSTRAINT\020\346\001\022\t\n\004LI" +
      "NQ\020\347\001\022\t\n\004FROM\020\350\001\022\n\n\005WHERE\020\351\001\022\013\n\006SELECT\020\352" +
      "\001\022\010\n\003LET\020\353\001\022\014\n\007ORDERBY\020\354\001\022\t\n\004JOIN\020\355\001\022\n\n\005",
      "GROUP\020\356\001\022\007\n\002IN\020\357\001\022\007\n\002ON\020\360\001\022\013\n\006EQUALS\020\361\001\022" +
      "\007\n\002BY\020\362\001\022\t\n\004INTO\020\363\001\022\n\n\005EMPTY\020\364\001\022\017\n\nEMPTY" +
      "_STMT\020\365\001\022\r\n\010RECEIVER\020\366\001\022\014\n\007MESSAGE\020\367\001\022\r\n" +
      "\010SELECTOR\020\370\001\022\022\n\rPROTOCOL_LIST\020\371\001\022\r\n\010CATE" +
      "GORY\020\372\001\022\r\n\010PROTOCOL\020\373\001\022\025\n\020REQUIRED_DEFAU" +
      "LT\020\374\001\022\r\n\010REQUIRED\020\375\001\022\r\n\010OPTIONAL\020\376\001\022\023\n\016A" +
      "TTRIBUTE_LIST\020\200\002\022\017\n\nSYNTHESIZE\020\201\002\022\014\n\007DYN" +
      "AMIC\020\202\002\022\013\n\006ENCODE\020\203\002\022\024\n\017AUTORELEASEPOOL\020" +
      "\204\002\022\030\n\023COMPATIBILITY_ALIAS\020\205\002\022\010\n\003NIL\020\206\002\022\024" +
      "\n\017CLASS_INTERFACE\020\207\002\022\031\n\024CLASS_IMPLEMENTA",
      "TION\020\210\002\022\031\n\024PROTOCOL_DECLARATION\020\211\002\022\t\n\004CA" +
      "ST\020\212\002\022\017\n\nCONST_CAST\020\213\002\022\021\n\014DYNAMIC_CAST\020\214" +
      "\002\022\025\n\020REINTERPRET_CAST\020\215\002\022\020\n\013STATIC_CAST\020" +
      "\216\002\022\r\n\010POSITION\020\217\002\022\027\n\022CUDA_ARGUMENT_LIST\020" +
      "\220\002\022\022\n\rOMP_DIRECTIVE\020\221\002\022\r\n\010OMP_NAME\020\222\002\022\017\n" +
      "\nOMP_CLAUSE\020\223\002\022\026\n\021OMP_ARGUMENT_LIST\020\224\002\022\021" +
      "\n\014OMP_ARGUMENT\020\225\002\022\023\n\016OMP_EXPRESSION\020\226\002\022\026" +
      "\n\021END_ELEMENT_TOKEN\020\227\002\022\t\n\004MAIN\020\230\002\022\n\n\005BRE" +
      "AK\020\231\002\022\r\n\010CONTINUE\020\232\002\022\n\n\005WHILE\020\233\002\022\007\n\002DO\020\234" +
      "\002\022\010\n\003FOR\020\235\002\022\007\n\002IF\020\236\002\022\t\n\004GOTO\020\245\002\022\023\n\016VISUA",
      "L_CXX_ASM\020\247\002\022\013\n\006SIZEOF\020\250\002\022\t\n\004AUTO\020\252\002\022\r\n\010" +
      "REGISTER\020\253\002\022\r\n\010RESTRICT\020\254\002\022\016\n\tIMAGINARY\020" +
      "\260\002\022\r\n\010NORETURN\020\261\002\022\022\n\rSTATIC_ASSERT\020\262\002\022\016\n" +
      "\tCRESTRICT\020\263\002\022\014\n\007CXX_TRY\020\264\002\022\016\n\tCXX_CATCH" +
      "\020\265\002\022\016\n\tCXX_CLASS\020\266\002\022\016\n\tCONSTEXPR\020\267\002\022\021\n\014T" +
      "HREAD_LOCAL\020\271\002\022\014\n\007NULLPTR\020\272\002\022\t\n\004VOID\020\306\002\022" +
      "\013\n\006RETURN\020\307\002\022\014\n\007INCLUDE\020\310\002\022\013\n\006DEFINE\020\311\002\022" +
      "\t\n\004ELIF\020\312\002\022\n\n\005ENDIF\020\313\002\022\016\n\tERRORPREC\020\314\002\022\014" +
      "\n\007WARNING\020\315\002\022\n\n\005IFDEF\020\316\002\022\013\n\006IFNDEF\020\317\002\022\t\n" +
      "\004LINE\020\320\002\022\013\n\006PRAGMA\020\321\002\022\n\n\005UNDEF\020\322\002\022\013\n\006INL",
      "INE\020\323\002\022\024\n\017MACRO_TYPE_NAME\020\324\002\022\017\n\nMACRO_CA" +
      "SE\020\325\002\022\020\n\013MACRO_LABEL\020\326\002\022\016\n\tSPECIFIER\020\330\002\022" +
      "\010\n\003TRY\020\331\002\022\n\n\005CATCH\020\332\002\022\n\n\005THROW\020\333\002\022\013\n\006THR" +
      "OWS\020\334\002\022\013\n\006PUBLIC\020\336\002\022\014\n\007PRIVATE\020\337\002\022\016\n\tPRO" +
      "TECTED\020\340\002\022\014\n\007VIRTUAL\020\341\002\022\r\n\010EXPLICIT\020\344\002\022\014" +
      "\n\007FOREVER\020\345\002\022\013\n\006SIGNAL\020\346\002\022\t\n\004EMIT\020\347\002\022\010\n\003" +
      "NEW\020\353\002\022\013\n\006DELETE\020\354\002\022\013\n\006STATIC\020\355\002\022\n\n\005CONS" +
      "T\020\356\002\022\014\n\007MUTABLE\020\357\002\022\r\n\010VOLATILE\020\360\002\022\016\n\tTRA" +
      "NSIENT\020\361\002\022\014\n\007FINALLY\020\364\002\022\n\n\005FINAL\020\370\002\022\r\n\010A" +
      "BSTRACT\020\371\002\022\n\n\005SUPER\020\372\002\022\021\n\014SYNCHRONIZED\020\373",
      "\002\022\013\n\006NATIVE\020\374\002\022\r\n\010STRICTFP\020\375\002\022\020\n\013NULLLIT" +
      "ERAL\020\376\002\022\013\n\006ASSERT\020\377\002\022\014\n\007FOREACH\020\200\003\022\010\n\003RE" +
      "F\020\201\003\022\010\n\003OUT\020\202\003\022\t\n\004LOCK\020\204\003\022\007\n\002IS\020\205\003\022\r\n\010IN" +
      "TERNAL\020\206\003\022\013\n\006SEALED\020\207\003\022\r\n\010OVERRIDE\020\210\003\022\r\n" +
      "\010IMPLICIT\020\211\003\022\017\n\nSTACKALLOC\020\212\003\022\007\n\002AS\020\213\003\022\r" +
      "\n\010DELEGATE\020\214\003\022\n\n\005FIXED\020\215\003\022\014\n\007CHECKED\020\216\003\022" +
      "\016\n\tUNCHECKED\020\217\003\022\013\n\006REGION\020\220\003\022\016\n\tENDREGIO" +
      "N\020\221\003\022\013\n\006UNSAFE\020\222\003\022\r\n\010READONLY\020\223\003\022\010\n\003GET\020" +
      "\224\003\022\010\n\003SET\020\225\003\022\010\n\003ADD\020\226\003\022\013\n\006REMOVE\020\227\003\022\n\n\005Y" +
      "IELD\020\230\003\022\014\n\007PARTIAL\020\231\003\022\n\n\005AWAIT\020\232\003\022\n\n\005ASY",
      "NC\020\234\003\022\t\n\004THIS\020\235\003\022\013\n\006PARAMS\020\236\003\022\n\n\005ALIAS\020\240" +
      "\003\022\016\n\tASCENDING\020\246\003\022\017\n\nDESCENDING\020\247\003\022\020\n\013AT" +
      "INTERFACE\020\256\003\022\025\n\020ATIMPLEMENTATION\020\257\003\022\n\n\005A" +
      "TEND\020\260\003\022\017\n\nATPROTOCOL\020\261\003\022\017\n\nATREQUIRED\020\262" +
      "\003\022\017\n\nATOPTIONAL\020\263\003\022\014\n\007ATCLASS\020\271\003\022\t\n\004WEAK" +
      "\020\273\003\022\013\n\006STRONG\020\274\003\022\014\n\007OMP_OMP\020\300\003\022\022\n\rSPECIA" +
      "L_CHARS\020\301\003B\007\n\005extrab\006proto3"
    };
    com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
        new com.google.protobuf.Descriptors.FileDescriptor.    InternalDescriptorAssigner() {
          public com.google.protobuf.ExtensionRegistry assignDescriptors(
              com.google.protobuf.Descriptors.FileDescriptor root) {
            descriptor = root;
            return null;
          }
        };
    com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
        }, assigner);
    internal_static_fast_Element_descriptor =
      getDescriptor().getMessageTypes().get(0);
    internal_static_fast_Element_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_fast_Element_descriptor,
        new java.lang.String[] { "Kind", "Text", "Tail", "Child", "Unit", "Literal", "Line", "Column", "Extra", });
    internal_static_fast_Element_Unit_descriptor =
      internal_static_fast_Element_descriptor.getNestedTypes().get(0);
    internal_static_fast_Element_Unit_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_fast_Element_Unit_descriptor,
        new java.lang.String[] { "Filename", "Revision", "Language", "Item", });
    internal_static_fast_Element_Literal_descriptor =
      internal_static_fast_Element_descriptor.getNestedTypes().get(1);
    internal_static_fast_Element_Literal_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_fast_Element_Literal_descriptor,
        new java.lang.String[] { "Type", });
  }

  // @@protoc_insertion_point(outer_class_scope)
}
